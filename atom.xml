<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ALWAYSXR BLOG</title>
  
  <subtitle>WELCOME</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-09-12T03:57:55.530Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>AlwaysXR</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/09/12/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    <id>http://example.com/2023/09/12/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%8E%E5%BA%94%E7%94%A8/</id>
    <published>2023-09-12T03:49:53.533Z</published>
    <updated>2023-09-12T03:57:55.530Z</updated>
    
    <content type="html"><![CDATA[<h1>分布式锁的实现与应用</h1><h3 id="为什么需要锁">为什么需要锁</h3><p>在多任务环境下解决并发场景的数据竞争问题</p><h3 id="Java常见锁">Java常见锁</h3><p>我们可以根据锁是否包含某一特性来进行分组归类</p><ul><li>从线程是否对资源加锁，可以将锁分为乐观锁和悲观锁</li><li>从资源已被锁定时，线程是否阻塞，可以分为自旋锁（JUC下的atomic家族）和阻塞锁（synchronized、ReentrantLock）</li><li>从多个线程并发访问资源，可以分为无锁、偏向锁、轻量级锁和重量级锁（jdk1.6开始进行锁优化）</li><li>从锁的公平性进行区分，分为公平锁和非公平锁</li><li>从锁是否可以重复获取可以分为可重入锁和不可重入锁</li><li>从多线程能否获得同一把锁分为共享锁和排他锁</li></ul><p><img src="https://z4a.net/images/2023/09/12/8a7064d4a8a581069b04407cb747b701.png" alt="img"></p><h3 id="为什么需要分布式锁">为什么需要分布式锁</h3><p>在单机应用的环境下，所有线程运行在同一个jvm进程中，使用Java中自带的锁足以控制并发；但是在分布式场景下，多个线程运行在不同的机器（jvm进程）上，就需要分布式锁来解决问题了</p><h3 id="什么是分布式锁">什么是分布式锁</h3><p>分布式锁是控制分布式系统不同进程并发访问共享资源的一种锁的实现。如果不同主机之间共享了某个临界资源（例如数据库中的数据），往往需要互斥来防止彼此干扰，以保证一致性。</p><p>作用：分布式集群中多个服务请求同一方法或者同一个业务操作（比如秒杀）的情况下，对应的业务逻辑只能被一台机器上的一个线程执行，避免出现并发安全问题。</p><h3 id="基于数据库实现的分布式锁">基于数据库实现的分布式锁</h3><p>利用<code>select...for update</code>，数据库行锁来实现悲观锁。注意：如果查询条件用了<strong>索引/主键</strong>，那么select … for update就会进行<strong>行锁</strong>；如果是普通字段(没有索引/主键)，那么select … for update就会进行锁表。</p><h4 id="悲观锁实现">悲观锁实现</h4><p>获取锁方法需要声明事务，加数据行锁，事务结束则释放行锁，释放锁的操作应放在finally中</p><p>伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//整体流程</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(lock(keyResource))&#123;<span class="comment">//加锁</span></span><br><span class="line">        process();<span class="comment">//业务逻辑处理</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    unlock(keyResource);<span class="comment">//释放</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//锁方法实现</span></span><br><span class="line"><span class="comment">//获取锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lock</span><span class="params">(String keyResource)</span>&#123;</span><br><span class="line">    resLock = <span class="string">&#x27;select * from resource_lock where key_resource = &#x27;</span>#&#123;keySource&#125;<span class="string">&#x27; for update&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(resLock != <span class="literal">null</span> &amp;&amp; resLock.getLockFlag == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    resLock.setLockFlag(<span class="number">1</span>);<span class="comment">//上锁</span></span><br><span class="line">    insertOrUpdate(resLock);<span class="comment">//提交</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">(String keyResource)</span>&#123;</span><br><span class="line">    resourceLock.setLockFlag(<span class="number">0</span>);<span class="comment">//解锁</span></span><br><span class="line">    update(resourceLock);<span class="comment">//提交</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="乐观锁实现">乐观锁实现</h4><p>基于CAS思想，在数据库表中添加version字段。</p><p>使用时，带着条件去更新(判断version)</p><p>mybatis-plus已支持自动配置</p><h4 id="特点">特点</h4><ol><li>由于数据库本身的性能瓶颈，基于数据库实现的分布式锁主要应用于并发不高的场景</li><li>实习方式简单，稳定可靠</li></ol><h3 id="基于Redis实现的分布式锁">基于Redis实现的分布式锁</h3><h4 id="原始方案">原始方案</h4><p>使用<code>SETNX</code>命令，<code>SETNX</code> 即 <strong>SET</strong> if <strong>N</strong>ot e<strong>X</strong>ists (对应 Java 中的 <code>setIfAbsent</code> 方法)，如果 key 不存在的话，才会设置 key 的值，返回1。如果 key 已经存在， <code>SETNX</code> 啥也不做，返回0。</p><p><code>expire KEY seconds</code>设置key的过期时间，如果key已过期，将会被自动删除。</p><p><code>del KEY</code>删除key</p><p>伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//setnx加锁</span></span><br><span class="line"><span class="keyword">if</span>(jedis.setnx(key,lock_value) == <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//设定锁过期时间</span></span><br><span class="line">    expire(key,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//业务处理</span></span><br><span class="line">        <span class="keyword">do</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span>()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="comment">//释放锁</span></span><br><span class="line">        jedis.del(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个原始方案中，setnx和expire是两个分开的操作而不是<strong>原子操作</strong>。如果执行完setnx操作后，在执行expire设置过期时间之前进程挂了，那这个锁就无法释放，其他线程也获取不到锁了。</p><h4 id="SET拓展命令（Redis2-6-12版本之后）">SET拓展命令（Redis2.6.12版本之后）</h4><p>使用redis拓展命令<code>SET key value[EX seconds][PX milliseconds][NX|XX]</code></p><p>其中各个参数的含义如下：</p><ul><li><code>key</code>: 要设置的键名。</li><li><code>value</code>: 要设置的值。</li><li><code>EX seconds</code>: 可选参数，表示设置键的过期时间（以秒为单位）。</li><li><code>PX milliseconds</code>: 可选参数，表示设置键的过期时间（以毫秒为单位）。</li><li><code>NX</code>: 可选参数，表示只在键不存在时才设置值。</li><li><code>XX</code>: 可选参数，表示只在键已经存在时才设置值。</li></ul><p>举例如下：</p><ul><li>设置一个键值对，不带任何选项：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> username alice</span><br></pre></td></tr></table></figure><p>这将设置键名为 “username” 的值为 “alice”。</p><ul><li>设置一个带有过期时间的键值对：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> session_token <span class="number">123456</span> EX <span class="number">3600</span></span><br></pre></td></tr></table></figure><p>这将设置键名为 “session_token” 的值为 “123456”，并且该键将在 3600 秒（1 小时）后过期。</p><ul><li>设置一个带有过期时间的键值对（以毫秒为单位）：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> cache_key data123 PX <span class="number">5000</span></span><br></pre></td></tr></table></figure><p>这将设置键名为 “cache_key” 的值为 “data123”，并且该键将在 5000 毫秒（5 秒）后过期。</p><ul><li>只在键不存在时设置值：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> order_status pending NX</span><br></pre></td></tr></table></figure><p>如果键名 “order_status” 不存在，那么它将被设置为 “pending”。如果键名已经存在，则不进行任何操作。</p><ul><li>只在键已经存在时设置值：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> login_attempts <span class="number">3</span> XX</span><br></pre></td></tr></table></figure><p>如果键名 “login_attempts” 已经存在，它的值将被设置为 “3”。如果键名不存在，则不进行任何操作。</p><p><strong>了解完这条命令，我们就可以用它来构建分布式锁了</strong></p><p>伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(jedis.set(key,lock_value,<span class="string">&quot;NX&quot;</span>,<span class="string">&quot;EX&quot;</span>,10s) == <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">do</span>();</span><br><span class="line">    &#125;<span class="keyword">catch</span>()&#123;</span><br><span class="line">  </span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        jedis.del(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种操作保证了set和expire的原子性，但是仍有其他问题：</p><ol><li>锁过期释放了，但是业务还没有执行完（后续会提到解决方法：看门狗机制）</li><li>锁被其他线程误删（后续会提到解决方法：Lua脚本）：线程1的锁过期释放后，被其他线程（线程2）获取，但是之前的线程（线程1）在执行结束后又del了锁（即释放了线程2的锁），在高并发情况下这种场景等同于没有加锁</li></ol><h4 id="锁误删问题">锁误删问题</h4><p>有的同学就要问了，既然锁可以被其他线程误删，那我们给他加一个唯一标识可以吗？总的来说思路上是没有问题的，但是不能简单的在Java中进行处理</p><p>如果我们在Java中进行判断，伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加锁时设置一个随机id来作为标识，如果释放锁时还是这个id即证明释放了自己的锁（实际上是有逻辑错误的）</span></span><br><span class="line"><span class="keyword">if</span>(jedis.set(key,randomId,<span class="string">&quot;NX&quot;</span>,<span class="string">&quot;EX&quot;</span>,10s) == <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">do</span>();</span><br><span class="line">    &#125;<span class="keyword">catch</span>()&#123;</span><br><span class="line">  </span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="comment">//从redis获取randomId，如果是期望值则释放</span></span><br><span class="line">        <span class="keyword">if</span>(randomId.equals(jedis.get(key)))&#123;</span><br><span class="line">        jedis.del(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起来好像没什么问题，但是这里又会出现<strong>不是原子操作导致</strong>的问题：如果在刚判断完randomId是期望值后，锁过期了，第二个线程创建了自己的锁，这时由于第一个线程已经通过了randomId的判断，那么它还是会释放线程二刚刚创建的锁，锁误删的问题仍然存在…</p><p>好消息是，我们还有其他解决方案。</p><p>在redis 2.6版本后，允许开发者使用Lua编写脚本来传到redis执行，这样做的好处如下：</p><ol><li>减少网络开销：本来多次网络请求的操作，可以用一个请求完成，原先多次请求的逻辑放在redis服务器上完成。使用脚本，减少了网络往返时延；</li><li>原子操作：Redis会将整个脚本作为一个整体执行，中间不会被其他命令插入/打断；</li><li>替代redis的事务功能：Redis的lua脚本几乎实现了常规的事务功能，支持报错回滚操作，官方推荐如果要用redis事务功能可以用redis lua脚本替代。</li></ol><p><strong>Redis Eval 命令基本语法如下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">EVAL script numkeys key [key ...] arg [arg ...] </span><br><span class="line"></span><br><span class="line"><span class="comment">#实例   eval  引号中是脚本内容                         key的个数 key[...]  arg[...]  </span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">eval</span> <span class="string">&quot;return &#123;KEYS[1],KEYS[2],ARGV[1],ARGV[2]&#125;&quot;</span> 2 username age jack 20</span><br><span class="line">1) <span class="string">&quot;username&quot;</span></span><br><span class="line">2) <span class="string">&quot;age&quot;</span></span><br><span class="line">3) <span class="string">&quot;jack&quot;</span></span><br><span class="line">4) <span class="string">&quot;20&quot;</span></span><br></pre></td></tr></table></figure><p>这时候我们就可以用Lua脚本来保证操作的原子性了</p><p>lua脚本：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> redis.call(<span class="string">&#x27;get&#x27;</span>,KEYS[<span class="number">1</span>])==ARGV[<span class="number">1</span>] <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> redis.call(<span class="string">&#x27;del&#x27;</span>,KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>在redis中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EVAL <span class="string">&quot;if redis.call(&#x27;get&#x27;,KEYS[1])==ARGV[1] then return redis.call(&#x27;del&#x27;,KEYS[1]) else return 0 end&quot;</span> 1 key value</span><br></pre></td></tr></table></figure><p>在Java中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;key&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> <span class="string">&quot;value&quot;</span>;</span><br><span class="line"><span class="comment">// 定义 Lua 脚本</span></span><br><span class="line"><span class="type">String</span> <span class="variable">luaScript</span> <span class="operator">=</span> <span class="string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line"><span class="comment">// 执行 Lua 脚本</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> jedis.eval(luaScript, <span class="number">1</span>, key, value);</span><br></pre></td></tr></table></figure><p>到这里，我们就可以解决锁误删的情况了，但是还有另外的一个问题没有解决，锁过期释放了但是业务还没有执行完怎么办？</p><h4 id="Redisson的看门狗机制">Redisson的看门狗机制</h4><p>Redisson和Jedis类似，是Java操作Redis的客户端，他在解决分布式场景问题比Jedis更加好用，提供了各种分布式对象、分布式锁、分布式同步器、分布式服务等等</p><p>Redission分布式锁的实现流程如下</p><p><img src="https://z4a.net/images/2023/09/12/30f68212ee6d9b00b543a1a08405b8b4.png" alt="img"></p><p>Redisson实现自动续约的实现思路即源码如下：</p><p><img src="https://z4a.net/images/2023/09/12/b50a77aa793f221d63104d308df2dcc8_720.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">renewExpiration</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// 获取当前锁的过期时间续约条目</span></span><br><span class="line">  RedissonBaseLock.<span class="type">ExpirationEntry</span> <span class="variable">ee</span> <span class="operator">=</span> (RedissonBaseLock.ExpirationEntry) EXPIRATION_RENEWAL_MAP.get(<span class="built_in">this</span>.getEntryName());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果存在续约条目</span></span><br><span class="line">  <span class="keyword">if</span> (ee != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建定时任务，定时执行续约操作</span></span><br><span class="line">    <span class="type">Timeout</span> <span class="variable">task</span> <span class="operator">=</span> <span class="built_in">this</span>.commandExecutor.getConnectionManager().newTimeout(<span class="keyword">new</span> <span class="title class_">TimerTask</span>() &#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(Timeout timeout)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取续约条目</span></span><br><span class="line">        RedissonBaseLock.<span class="type">ExpirationEntry</span> <span class="variable">ent</span> <span class="operator">=</span> (RedissonBaseLock.ExpirationEntry) EXPIRATION_RENEWAL_MAP.get(RedissonBaseLock.<span class="built_in">this</span>.getEntryName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果续约条目存在</span></span><br><span class="line">        <span class="keyword">if</span> (ent != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="type">Long</span> <span class="variable">threadId</span> <span class="operator">=</span> ent.getFirstThreadId();</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 如果存在线程ID</span></span><br><span class="line">          <span class="keyword">if</span> (threadId != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 异步执行续约操作</span></span><br><span class="line">            CompletionStage&lt;Boolean&gt; future = RedissonBaseLock.<span class="built_in">this</span>.renewExpirationAsync(threadId);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当异步操作完成时</span></span><br><span class="line">            future.whenComplete((res, e) -&gt; &#123;</span><br><span class="line">              <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 发生错误时，记录日志并移除续约条目</span></span><br><span class="line">                RedissonBaseLock.log.error(<span class="string">&quot;Can&#x27;t update lock &quot;</span> + RedissonBaseLock.<span class="built_in">this</span>.getRawName() + <span class="string">&quot; expiration&quot;</span>, e);</span><br><span class="line">                RedissonBaseLock.EXPIRATION_RENEWAL_MAP.remove(RedissonBaseLock.<span class="built_in">this</span>.getEntryName());</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果续约成功，递归调用续约操作</span></span><br><span class="line">                <span class="keyword">if</span> (res) &#123;</span><br><span class="line">                  RedissonBaseLock.<span class="built_in">this</span>.renewExpiration();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="comment">// 如果无法续约，取消续约操作</span></span><br><span class="line">                  RedissonBaseLock.<span class="built_in">this</span>.cancelExpirationRenewal((Long)<span class="literal">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="built_in">this</span>.internalLockLeaseTime / <span class="number">3L</span>, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置定时任务到续约条目</span></span><br><span class="line">    ee.setTimeout(task);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> CompletionStage&lt;Boolean&gt; <span class="title function_">renewExpirationAsync</span><span class="params">(<span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">  <span class="comment">// 使用 evalWriteAsync 方法执行 Lua 脚本</span></span><br><span class="line">  <span class="comment">// 这个脚本会检查锁是否仍然由给定的线程持有，如果是则更新锁的过期时间</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.evalWriteAsync(</span><br><span class="line">    <span class="built_in">this</span>.getRawName(),                       <span class="comment">// 锁的键名</span></span><br><span class="line">    LongCodec.INSTANCE,                      <span class="comment">// 键的编码器</span></span><br><span class="line">    RedisCommands.EVAL_BOOLEAN,              <span class="comment">// 使用 EVAL 命令并返回布尔值</span></span><br><span class="line">    <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); return 1; end; return 0;&quot;</span>,</span><br><span class="line">    Collections.singletonList(<span class="built_in">this</span>.getRawName()),     <span class="comment">// 键名作为 KEYS[1]</span></span><br><span class="line">    <span class="built_in">this</span>.internalLockLeaseTime,              <span class="comment">// 锁的过期时间（毫秒）</span></span><br><span class="line">    <span class="built_in">this</span>.getLockName(threadId)               <span class="comment">// 获取锁的名称，用于验证锁的持有者</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>只有在未指定锁超时时间时，才会使用看门狗</li><li>如果Redisson实例挂了，看门狗也会跟着crash，那么达到失效时间的这个key会被redis清除，锁也就被释放了，不会出现锁被永久占用的问题。</li></ol><p>Redisson的RLock接口继承了JUC的lock接口，所以他是符合Java中的Lock接口规范的，同时Redisson还提供了多种分布式锁的实现类（例如：RedissonFairLock、RedissonRedLock等）可供大家选择</p><h4 id="Redis集群数据不一致问题">Redis集群数据不一致问题</h4><p>在部署redis时，为了避免单点问题，我们通常会采用<strong>集群</strong>方式部署，由于redis集群的数据同步是异步操作，在主节点加锁后就会返回加锁成功；如果一个线程在master节点上拿到了锁，但是<strong>加锁的key还没同步到slave节点时master节点就发生了故障</strong>，一个slave节点就会升级成master节点，其他线程就也可以获取同个key的锁，又一次<strong>相当于没加锁</strong></p><p>redis的作者提出了一种高级的分布式锁算法：Redlock，来解决这个问题</p><p><strong>Redlock核心思想</strong></p><p>搞<strong>多个Redis master</strong>部署，以保证它们不会同时宕掉。并且这些master节点是<strong>完全相互独立</strong>的，相互之间不存在数据同步。同时，需要确保在这多个master实例上，是在与Redis单实例使用相同方法来获取和释放锁。</p><p><img src="https://z4a.net/images/2023/09/12/1aa899e61190d30d11f5fa9b1ded6cf4.png" alt="img"></p><p><strong>Redlock流程步骤</strong></p><p>1、按顺序向多个master节点（如上图5个）请求加锁</p><p>2、根据设置的超时时间来判断，是不是要跳过该master节点；</p><p>3、如果有半数以上节点加锁成功(右图3个成功即可)，并且使用的时间小于锁的有效期（设置单个节点超时时间），即可认定加锁成功；</p><p>4、如果获取锁失败，给所有的master节点解锁</p><h3 id="基于ZooKeeper实现的分布式锁">基于ZooKeeper实现的分布式锁</h3><p>这个之前已经写过博客辣，大家直接点击链接跳转即可~</p><p><a href="https://blog.csdn.net/m0_51561690/article/details/130408064">基于ZooKeeper临时顺序节点的分布式锁实现_❀always❀的博客-CSDN博客</a></p><p>实现思路如下：</p><p><img src="https://z4a.net/images/2023/09/12/image-20230814200751479.png" alt="image-20230814200751479"></p><h3 id="分布式锁实现方案比较">分布式锁实现方案比较</h3><table><thead><tr><th>方案</th><th>思路</th><th>优点</th><th>缺点</th><th>典型场景</th></tr></thead><tbody><tr><td>mysql</td><td>悲观锁、乐观锁</td><td>实现简单、稳定可靠</td><td>性能差，不适合高并发</td><td>分布式定时任务</td></tr><tr><td>redis</td><td>基于SETNX和Lua脚本保证缓存操作原子化</td><td>性能好（AP）</td><td>实现相对复杂，不是100%可靠</td><td>秒杀、抢购、大型抽奖</td></tr><tr><td>zookeeper</td><td>基于ZK的节点特性和Watcher机制</td><td>可靠性高（CP）</td><td>实现相对复杂，性能略差</td><td>秒杀、抢购、大型抽奖</td></tr></tbody></table><h3 id="分布式锁与高并发">分布式锁与高并发</h3><p>从设计角度来看，分布式锁和高并发本身是<strong>矛盾</strong>的：分布式锁实际是将<strong>并行代码串行化</strong>来解决并发问题，对性能是有影响的，但是可以进行优化。</p><p>主要方案有：</p><ol><li>锁粒度最小：尽可能地将最小粒度的有并发安全问题的代码放在锁里面，其他代码都放到锁外面去，这是锁的基本优化原则</li><li>数据分片：例如ConcurrentHashMap使用分段锁机制提高并发能力，MySQL分库分表（将压力分摊到不同DB上）等</li></ol><h3 id="业务场景中分布式锁的应用">业务场景中分布式锁的应用</h3><ul><li><p>某事件发生后需要发短信提醒用户，且两小时之内多次发生该事件只在第一次提醒用户</p><p>实现思路：在每次发短信之前先获取分布式锁，设定过期时间为2h，若2h内事件再次发生则无法获取到相同的分布式锁，自动跳过发送短信的流程即可</p></li><li><p>保证某表中以 id+当日时间 为唯一标识的数据只有一条</p><p>实现思路：在插入或更新时，先获取到分布式锁，成功插入后解锁</p></li><li><p>抢购某总量限定的奖品</p><p>实现思路：每个线程抢占分布式锁，抢占成功后判断剩余数量是否满足所需数量，若满足，则抢购成功并释放锁</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;分布式锁的实现与应用&lt;/h1&gt;
&lt;h3 id=&quot;为什么需要锁&quot;&gt;为什么需要锁&lt;/h3&gt;
&lt;p&gt;在多任务环境下解决并发场景的数据竞争问题&lt;/p&gt;
&lt;h3 id=&quot;Java常见锁&quot;&gt;Java常见锁&lt;/h3&gt;
&lt;p&gt;我们可以根据锁是否包含某一特性来进行分组归类&lt;/p&gt;
&lt;ul&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/09/12/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%8F%E6%84%9F%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%96%B9%E6%A1%88/"/>
    <id>http://example.com/2023/09/12/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%8F%E6%84%9F%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%96%B9%E6%A1%88/</id>
    <published>2023-09-12T03:49:37.883Z</published>
    <updated>2023-09-12T03:59:40.460Z</updated>
    
    <content type="html"><![CDATA[<h1>常见的敏感数据加密方案</h1><p>招联内部分享资料</p><h3 id="常见的加密手段">常见的加密手段</h3><ol><li><p>网络层加密</p><p>通常用于保障数据再网络传输时的安全</p></li><li><p>硬件层加密</p><p>数据的存储设备提供加密，例如硬盘加密</p></li><li><p>磁盘加密</p><p>通过在磁盘读写时对磁盘扇区进行加解密来实现，避免文件的读写，避免了与应用程序相关的限制</p></li><li><p>文件加密</p><p>通过堆叠在其他文件系统之上（如Ext2，Ext3，ReiserFS，JFS等）。最新型应用是”透明加解密“，主要是通过建立应用程序的进程和相应文件之间的关联来达到对特定文件的加解密的目的，通常在操作系统底层对文件进行处理，其加解密过程对用户透明。但是，由于该技术的实现机制所限，决定了文件是否加密主要取决于应用程序和文件的关联关系，这导致安全系统与应用程序的具体实现密切相关，对于用户环境的兼容性较差，针织有可能出现数据被破坏的情况</p></li><li><p>数据库加密-TDE</p><p>数据库提供的一种加密技术，即对数据文件执行实时I/O加密和解密。数据在写入磁盘之前进行加密，从磁盘读入内存时进行解密。TDE不会增加数据文件的大小，开发人员无需更改任何应用程序。其对应密钥管理也是由数据库提供的API或组件实现，应用透明。在某些场景下磁盘或系统无法对用户开放（如云环境）的条件下，这种方式就比较合适</p></li><li><p>应用层加密</p><p>可以说是一种终极方案，其可保证在数据到达数据库之前，就已经做了加密处理，可实时保护用户敏感数据。这里关键需要提供应用透明性，保证应用无需改造或仅需要少量改造。这种方式完全由用户自己控制，无需信任任何三方厂商提供的数据安全保障，得到充分的自由度和灵活性。</p></li></ol><table><thead><tr><th>安全风险</th><th>磁盘加密</th><th>文件加密</th><th>数据库加密</th><th>应用层加密</th></tr></thead><tbody><tr><td>防止磁盘丢失引起数据泄露</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>防止系统root账户和管理员账户访问</td><td>×</td><td>√</td><td>√</td><td>√</td></tr><tr><td>控制数据库管理员访问数据</td><td>×</td><td>×</td><td>√</td><td>√</td></tr><tr><td>抵抗APT（定向威胁攻击）造成数据泄露</td><td>×</td><td>√</td><td>√</td><td>√</td></tr><tr><td>确保备份数据和数据快照加密存储</td><td>×</td><td>√</td><td>√</td><td>√</td></tr><tr><td>非结构化数据和文件的保护</td><td>√</td><td>√</td><td>×</td><td>√</td></tr><tr><td>防止硬件和数据库厂商偷窥</td><td>×</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><blockquote><p>​部署复杂度</p><p>-----------------------------------------------------------------&gt;&gt;&gt;</p><p>应用层加密  数据库加密  文件层加密  存储层加密</p><p>&lt;&lt;&lt;-----------------------------------------------------------------</p><p>​数据安全性</p></blockquote><h3 id="常见的加密算法">常见的加密算法</h3><ol><li><p>散列函数（散列函数、哈希函数）</p><p>把消息或数据压缩成摘要，使得数据量变小，使数据的格式固定成特定长度的值，没有解密过程。</p><p>散列结果不可逆，常用于校验数据是否完整等</p><p>常见算法：MD5、SHA-256等</p></li><li><p>对称加密</p><p>只有一个密钥，加密解密都用它。要求加解密双方事先知道加密的密钥。</p><p>优点：算法公开，计算量小，加密速度快，效率高</p><p>缺点：密钥泄露数据就会被破解</p><p>常见算法：</p><p>​DES：数据加密标准，速度较快，适用于加密大量数据的场合</p><p>​3DES：基于DES用三组不同密钥对一块数据进行三次加密，安全性更高</p><p>​AES：高级加密标准，是下一代加密算法标准，速度快，安全级别高，支持128、192、256位密钥的加密</p></li><li><p>非对称加密</p><p>有公钥和私钥，二者配对生成</p><p>优点：算法强度复杂、安全性高</p><p>缺点：加解密速度没有对称加密算法快</p><p>常见算法：</p><p>​RSA：基于大整数分解难的问题提出。速度比同样安全级别的对称密码算法要慢1000倍。常用1024、2048位密钥加解密</p><p>​ECC：基于椭圆曲线上的离散对数计算问题提出，在数学上更难，但是计算更快。常用256位</p><p>ECC和RSA相比在许多方面有优势：</p><ul><li>抗攻击型强</li><li>CPU占用少</li><li>内容使用少</li><li>网络消耗低</li><li>加密速度快</li><li>随安全等级提升RSA密钥长度指数级增长，而ECC是线性增长</li></ul><p>已经证明，3072bit的RSA  和  283bit的ECC  和  128bit的对称密码的  <strong>算法强度相当</strong></p></li></ol><h3 id="实践">实践</h3><p>密码管理系统KMS</p><ul><li>密钥管理（包括第三方密钥导入、托管）</li><li>数据库密码管理</li><li>身份证手机号银行卡号等敏感信息加密（身份证号、手机号、银行卡号等敏感信息不允许明文落库）</li><li>密码信息管理（业务系统中，无感获取和使用）</li><li>证书管理</li></ul><p><strong>kms应用架构</strong></p><p>持续部署对kms的单项依赖，并由持续部署实现密钥文件的注入</p><p><img src="https://z4a.net/images/2023/09/12/image-20230811091247482.png" alt="image-20230811091247482"></p><p><strong>客户端是如何获得和使用密钥的</strong></p><p><img src="https://z4a.net/images/2023/09/12/8ffb939edabe60ecfb319225e1efde48.png" alt="img"></p><p><strong>密钥是如何生成的</strong></p><p>密钥的分层结构：数据加密密钥 (工作密),密钥加密密钥,根密钥。下层密钥为上策密钥体提供保护</p><p>数据加密密钥：工作密钥对本地保存的敏感数据和需要在不安全信道上传输的数据提供机密性、完整性保护，还可提供认证和签名等密码学服务。工作密钥直接被上层应用程序所使用，包括存储加密使用的密钥、预共享密钥、MAC密钥、签名私钥等</p><p>密钥加密密钥：对工作密钥提供机密性保护的密钥，其自身受到根密钥的保护</p><p>根密钥：位于密钥管理分层结构的最底端，用于对上层密钥 (如密钥加密密钥)</p><p><img src="https://z4a.net/images/2023/09/12/4dba650cdc025f2b23c00fef561566f4.png" alt="img"></p><p><strong>实现信息加密的流程</strong>（密钥是如何使用的）</p><p><img src="https://z4a.net/images/2023/09/12/image-20230811094115460.png" alt="image-20230811094115460"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;常见的敏感数据加密方案&lt;/h1&gt;
&lt;p&gt;招联内部分享资料&lt;/p&gt;
&lt;h3 id=&quot;常见的加密手段&quot;&gt;常见的加密手段&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;网络层加密&lt;/p&gt;
&lt;p&gt;通常用于保障数据再网络传输时的安全&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;硬件层加密&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/09/12/CompletableFuture%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2023/09/12/CompletableFuture%E5%85%A5%E9%97%A8/</id>
    <published>2023-09-12T03:49:37.879Z</published>
    <updated>2023-09-12T03:55:21.418Z</updated>
    
    <content type="html"><![CDATA[<h1>CompletableFuture</h1><h3 id="回顾Future">回顾Future</h3><p>Future可以实现异步并行调用，如下面这段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FutureTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException,</span><br><span class="line">InterruptedException &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">UserInfoService</span> <span class="variable">userInfoService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserInfoService</span>();</span><br><span class="line"><span class="type">MedalService</span> <span class="variable">medalService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MedalService</span>();</span><br><span class="line"><span class="type">long</span> <span class="variable">userId</span> <span class="operator">=</span> <span class="number">666L</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="comment">//操作一</span></span><br><span class="line">FutureTask&lt;UserInfo&gt; userInfoFutureTask =</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(() -&gt; &#123;</span><br><span class="line">Thread.sleep(<span class="number">10000</span>);</span><br><span class="line"><span class="keyword">return</span> userInfoService.getUserInfo(userId);</span><br><span class="line">&#125;);</span><br><span class="line">executorService.submit(userInfoFutureTask);</span><br><span class="line">        <span class="comment">//操作二        </span></span><br><span class="line">FutureTask&lt;MedalInfo&gt; medalInfoFutureTask =</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(() -&gt; &#123;</span><br><span class="line">Thread.sleep(<span class="number">10000</span>);</span><br><span class="line"><span class="keyword">return</span> medalService.getMedalInfo(userId);</span><br><span class="line">&#125;);</span><br><span class="line">executorService.submit(medalInfoFutureTask);</span><br><span class="line"></span><br><span class="line"><span class="type">UserInfo</span> <span class="variable">userInfo</span> <span class="operator">=</span> userInfoFutureTask.get();<span class="comment">//获取个人信息结果</span></span><br><span class="line"><span class="type">MedalInfo</span> <span class="variable">medalInfo</span> <span class="operator">=</span> medalInfoFutureTask.get();<span class="comment">//获取勋章信息结果</span></span><br><span class="line">System.out.println(userInfo);</span><br><span class="line">System.out.println(medalInfo);</span><br><span class="line">System.out.println(<span class="string">&quot;总共用时&quot;</span> + (System.currentTimeMillis() - startTime) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个操作中，我们都加入了一个sleep方法来模拟10s的耗时操作，如果不使用异步并行而让主线程去处理这两个任务，则会消耗20s，使用Future+线程池的异步操作则只需要10s即可完成。</p><p>但是Future并不是完美的，它在结果获取的方面做的不是很好（处理方式为阻塞或者轮询）：</p><ol><li>Future.get() 就是阻塞调用，在线程获取结果之前<strong>get方法会一直阻塞</strong>。</li><li>Future提供了一个isDone方法，可以在程序中<strong>轮询这个方法查询</strong>执行结果。</li></ol><p>阻塞违背了异步调用的设计初衷，而轮询会对CPU造成无谓的占用</p><h3 id="CompletableFuture引入">CompletableFuture引入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompletableFutureTest</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException,</span><br><span class="line">   ExecutionException &#123;</span><br><span class="line">  <span class="type">UserInfoService</span> <span class="variable">userInfoService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserInfoService</span>();</span><br><span class="line">  <span class="type">MedalService</span> <span class="variable">medalService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MedalService</span>();</span><br><span class="line">  <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">666L</span>;</span><br><span class="line">  <span class="type">Long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//操作一</span></span><br><span class="line">  CompletableFuture&lt;UserInfo&gt; completableFutureUserInfo =</span><br><span class="line">    CompletableFuture.supplyAsync(<span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;UserInfo&gt;() &#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">public</span> UserInfo <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> userInfoService.getUserInfo(id);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">       e.printStackTrace();</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//操作二</span></span><br><span class="line">  CompletableFuture&lt;MedalInfo&gt; completableFutureMedalInfo =</span><br><span class="line">    CompletableFuture.supplyAsync(<span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;MedalInfo&gt;() &#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">public</span> MedalInfo <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> medalService.getMedalInfo(id);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">       e.printStackTrace();</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="type">UserInfo</span> <span class="variable">userInfo</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="type">MedalInfo</span> <span class="variable">medalInfo</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="comment">//普通的get，阻塞线程直到获得到结果</span></span><br><span class="line">   medalInfo = completableFutureMedalInfo.get();</span><br><span class="line">   <span class="comment">//限时的get，如果限定时间内没有结果抛出超时异常（调用get方法开始计时）</span></span><br><span class="line">   userInfo = completableFutureUserInfo.get(<span class="number">1</span>, TimeUnit.MICROSECONDS);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">   System.out.println(<span class="string">&quot;超时了！&quot;</span>+ (Objects.isNull(userInfo)?<span class="string">&quot;超时&quot;</span>:userInfo));</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(userInfo + <span class="string">&quot;  &quot;</span> + medalInfo);</span><br><span class="line">  System.out.println(System.currentTimeMillis() - startTime + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在CompletableFuture中，我们可以选择让异步任务在其默认的线程池（ForkJoinPool.commonPool）中运行。</p><p>CompletableFuture提供了几十种方法，辅助我们的异步任务场景。这些方法包括<strong>创建异步任务、任务异步回调、多个任务组合处理</strong>等方面。</p><h3 id="创建异步任务">创建异步任务</h3><p>异步任务可以分为两大类：有返回结果（supplyAsync）和无返回结果（runAsync）</p><ul><li><p>supplyAsync</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用默认内置线程池ForkJoinPool.commonPool()，根据supplier构建执行任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">supplyAsync</span><span class="params">(Supplier&lt;U&gt; supplier)</span></span><br><span class="line"><span class="comment">//根据supplier构建执行任务，使用自定义的线程池</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">supplyAsync</span><span class="params">(Supplier&lt;U&gt; supplier, Executor executor)</span></span><br></pre></td></tr></table></figure></li><li><p>runAsync</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用默认内置线程池ForkJoinPool.commonPool()，根据runnable构建执行任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title function_">runAsync</span><span class="params">(Runnable runnable)</span> </span><br><span class="line"><span class="comment">//根据supplier构建执行任务，使用自定义的线程池</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title function_">runAsync</span><span class="params">(Runnable runnable,  Executor executor)</span></span><br></pre></td></tr></table></figure></li><li><p>获取任务结果的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 如果完成则返回结果，否则就抛出具体的异常</span></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 最大时间等待返回结果，否则就抛出具体异常</span></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">get</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 完成时返回结果值，否则抛出unchecked异常。为了更好地符合通用函数形式的使用，如果完成此 CompletableFuture所涉及的计算引发异常，则此方法将引发unchecked异常并将底层异常作为其原因</span></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">join</span><span class="params">()</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 如果完成则返回结果值（或抛出任何遇到的异常），否则返回给定的 valueIfAbsent。</span></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">getNow</span><span class="params">(T valueIfAbsent)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 如果任务没有完成，返回的值设置为给定值</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">complete</span><span class="params">(T value)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 如果任务没有完成，就抛出给定异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">completeExceptionally</span><span class="params">(Throwable ex)</span> </span><br></pre></td></tr></table></figure></li></ul><h3 id="任务异步回调">任务异步回调</h3><p><img src="https://z4a.net/images/2023/09/12/image-20230803170636483.png" alt="image-20230803170636483"></p><ul><li><p>thenRun和thenRunAsync</p><p>thenRun表示某个任务执行完成后执行的动作，即回调方法，无入参，无返回值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        CompletableFuture&lt;Integer&gt; cf1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot; cf1 do something....&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"> </span><br><span class="line">        CompletableFuture&lt;Void&gt; cf2 = cf1.thenRun(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot; cf2 do something....&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//等待任务1执行完成</span></span><br><span class="line">        System.out.println(<span class="string">&quot;cf1结果-&gt;&quot;</span> + cf1.get());</span><br><span class="line">        <span class="comment">//等待任务2执行完成</span></span><br><span class="line">        System.out.println(<span class="string">&quot;cf2结果-&gt;&quot;</span> + cf2.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">cf1 do something....</span></span><br><span class="line"><span class="comment">cf2 do something....</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">null</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>thenAccept和thenAcceptAsync</p><p>thenAccep表示某个任务执行完成后执行的动作，即回调方法，会将该任务的执行结果即方法返回值作为入参传递到回调方法中，无返回值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">CompletableFuture&lt;Integer&gt; cf1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;cf1 do something....&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;Void&gt; cf2 = cf1.thenAccept((result) -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;accept:&quot;</span>+ result);</span><br><span class="line">System.out.println(<span class="string">&quot;cf2 do something....&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//等待任务1执行完成</span></span><br><span class="line">System.out.println(<span class="string">&quot;cf1结果-&gt;&quot;</span> + cf1.get());</span><br><span class="line"><span class="comment">//等待任务2执行完成</span></span><br><span class="line">System.out.println(<span class="string">&quot;cf2结果-&gt;&quot;</span> + cf2.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">cf1 do something....</span></span><br><span class="line"><span class="comment">accept:1</span></span><br><span class="line"><span class="comment">cf2 do something....</span></span><br><span class="line"><span class="comment">cf1结果-&gt;1</span></span><br><span class="line"><span class="comment">cf2结果-&gt;null</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>thenApply和thenApplyAsync</p><p>thenApply 表示某个任务执行完成后执行的动作，即回调方法，会将该任务的执行结果即方法返回值作为入参传递到回调方法中，带有返回值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        CompletableFuture&lt;Integer&gt; cf1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;cf1 do something....&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"> </span><br><span class="line">        CompletableFuture&lt;Integer&gt; cf2 = cf1.thenApplyAsync((result) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;cf2 do something....&quot;</span>);</span><br><span class="line">            result += <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//等待任务1执行完成</span></span><br><span class="line">        System.out.println(<span class="string">&quot;cf1结果-&gt;&quot;</span> + cf1.get());</span><br><span class="line">        <span class="comment">//等待任务2执行完成</span></span><br><span class="line">        System.out.println(<span class="string">&quot;cf2结果-&gt;&quot;</span> + cf2.get());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">cf1 do something....</span></span><br><span class="line"><span class="comment">cf2 do something....</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>exceptionally</p><p>CompletableFuture的exceptionally方法表示，某个任务执行异常时，执行的回调方法;并且有抛出异常作为参数，传递到回调方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">CompletableFuture&lt;String&gt; orgFuture = CompletableFuture.supplyAsync(</span><br><span class="line">()-&gt;&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;当前线程名称：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;String&gt; exceptionFuture = orgFuture.exceptionally((e) -&gt; &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;你的程序异常啦&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">   <span class="comment">//加上这句会直接报异常</span></span><br><span class="line"><span class="comment">//System.out.println(orgFuture.get());</span></span><br><span class="line">System.out.println(exceptionFuture.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">jdk17版本的输出：</span></span><br><span class="line"><span class="comment">当前线程名称：ForkJoinPool.commonPool-worker-1</span></span><br><span class="line"><span class="comment">你的程序异常啦</span></span><br><span class="line"><span class="comment">java.util.concurrent.CompletionException: java.lang.RuntimeException</span></span><br><span class="line"><span class="comment">at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:315)</span></span><br><span class="line"><span class="comment">at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:320)</span></span><br><span class="line"><span class="comment">at java.base/java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1770)</span></span><br><span class="line"><span class="comment">at java.base/java.util.concurrent.CompletableFuture$AsyncSupply.exec(CompletableFuture.java:1760)</span></span><br><span class="line"><span class="comment">at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)</span></span><br><span class="line"><span class="comment">at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)</span></span><br><span class="line"><span class="comment">at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)</span></span><br><span class="line"><span class="comment">at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)</span></span><br><span class="line"><span class="comment">at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)</span></span><br><span class="line"><span class="comment">Caused by: java.lang.RuntimeException</span></span><br><span class="line"><span class="comment">at ComFutureTest.FutureExceptionTest.lambda$main$0(FutureExceptionTest.java:13)</span></span><br><span class="line"><span class="comment">at java.base/java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1768)</span></span><br><span class="line"><span class="comment">... 6 more</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>whenComplete和whenCompleteAsync<br>whenComplete是当某个任务执行完成后执行的回调方法，会将执行结果或者执行期间抛出的异常传递给回调方法，如果是正常执行则异常为null，回调方法对应的CompletableFuture的result和该任务一致，如果该任务正常执行，则get方法返回执行结果，如果是执行异常，则get方法抛出异常。</p><p>whenComplete</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        CompletableFuture&lt;Integer&gt; cf1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread() + <span class="string">&quot; cf1 do something....&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"> </span><br><span class="line">        CompletableFuture&lt;Integer&gt; cf2 = cf1.whenComplete((result, e) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;上个任务结果：&quot;</span> + result);</span><br><span class="line">            System.out.println(<span class="string">&quot;上个任务抛出异常：&quot;</span> + e);</span><br><span class="line">            System.out.println(Thread.currentThread() + <span class="string">&quot; cf2 do something....&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;cf2结果-&gt;&quot;</span> + cf2.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Thread[ForkJoinPool.commonPool-worker-1,5,main] cf1 do something....</span></span><br><span class="line"><span class="comment">上个任务结果：null</span></span><br><span class="line"><span class="comment">上个任务抛出异常：java.util.concurrent.CompletionException: java.lang.ArithmeticException: / by zero</span></span><br><span class="line"><span class="comment">Thread[ForkJoinPool.commonPool-worker-1,5,main] cf2 do something....</span></span><br><span class="line"><span class="comment">Exception in thread &quot;main&quot; java.util.concurrent.ExecutionException: java.lang.ArithmeticException: / by zero</span></span><br><span class="line"><span class="comment">at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:396)</span></span><br><span class="line"><span class="comment">at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2073)</span></span><br><span class="line"><span class="comment">at ComFutureTest.FutureExceptionTest.main(FutureExceptionTest.java:41)</span></span><br><span class="line"><span class="comment">Caused by: java.lang.ArithmeticException: / by zero</span></span><br><span class="line"><span class="comment">at ComFutureTest.FutureExceptionTest.lambda$main$0(FutureExceptionTest.java:28)</span></span><br><span class="line"><span class="comment">at java.base/java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1768)</span></span><br><span class="line"><span class="comment">at java.base/java.util.concurrent.CompletableFuture$AsyncSupply.exec(CompletableFuture.java:1760)</span></span><br><span class="line"><span class="comment">at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)</span></span><br><span class="line"><span class="comment">at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)</span></span><br><span class="line"><span class="comment">at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)</span></span><br><span class="line"><span class="comment">at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)</span></span><br><span class="line"><span class="comment">at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>whenCompleteAsync区别在于能有指定使用自定义线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">CompletableFuture&lt;Integer&gt; cf1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">System.out.println(Thread.currentThread() + <span class="string">&quot; cf1 do something....&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;Integer&gt; cf2 = cf1.whenCompleteAsync((result, e) -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;上个任务结果：&quot;</span> + result);</span><br><span class="line">System.out.println(<span class="string">&quot;上个任务抛出异常：&quot;</span> + e);</span><br><span class="line">System.out.println(Thread.currentThread() + <span class="string">&quot; cf2 do something....&quot;</span>);</span><br><span class="line">&#125;, Executors.newSingleThreadExecutor());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;cf2结果-&gt;&quot;</span> + cf2.get());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*若注释异常代码</span></span><br><span class="line"><span class="comment">Thread[ForkJoinPool.commonPool-worker-1,5,main] cf1 do something....</span></span><br><span class="line"><span class="comment">上个任务结果：1</span></span><br><span class="line"><span class="comment">上个任务抛出异常：null</span></span><br><span class="line"><span class="comment">Thread[pool-1-thread-1,5,main] cf2 do something....</span></span><br><span class="line"><span class="comment">cf2结果-&gt;1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*带有异常</span></span><br><span class="line"><span class="comment">Thread[ForkJoinPool.commonPool-worker-1,5,main] cf1 do something....</span></span><br><span class="line"><span class="comment">上个任务结果：null</span></span><br><span class="line"><span class="comment">上个任务抛出异常：java.util.concurrent.CompletionException: java.lang.ArithmeticException: / by zero</span></span><br><span class="line"><span class="comment">Thread[pool-1-thread-1,5,main] cf2 do something....</span></span><br><span class="line"><span class="comment">Exception in thread &quot;main&quot; java.util.concurrent.ExecutionException: java.lang.ArithmeticException: / by zero</span></span><br><span class="line"><span class="comment">at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:396)</span></span><br><span class="line"><span class="comment">at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2073)</span></span><br><span class="line"><span class="comment">at ComFutureTest.FutureExceptionTest.main(FutureExceptionTest.java:42)</span></span><br><span class="line"><span class="comment">Caused by: java.lang.ArithmeticException: / by zero</span></span><br><span class="line"><span class="comment">at ComFutureTest.FutureExceptionTest.lambda$main$0(FutureExceptionTest.java:29)</span></span><br><span class="line"><span class="comment">at java.base/java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1768)</span></span><br><span class="line"><span class="comment">at java.base/java.util.concurrent.CompletableFuture$AsyncSupply.exec(CompletableFuture.java:1760)</span></span><br><span class="line"><span class="comment">at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)</span></span><br><span class="line"><span class="comment">at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)</span></span><br><span class="line"><span class="comment">at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)</span></span><br><span class="line"><span class="comment">at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)</span></span><br><span class="line"><span class="comment">at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>handle和handleAsync</p><p>跟whenComplete基本一致，区别在于handle的回调方法有返回值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        CompletableFuture&lt;Integer&gt; cf1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread() + <span class="string">&quot; cf1 do something....&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        CompletableFuture&lt;Integer&gt; cf2 = cf1.handle((result, e) -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread() + <span class="string">&quot; cf2 do something....&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;上个任务结果：&quot;</span> + result);</span><br><span class="line">            System.out.println(<span class="string">&quot;上个任务抛出异常：&quot;</span> + e);</span><br><span class="line">            <span class="keyword">return</span> result+<span class="number">2</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//等待任务2执行完成</span></span><br><span class="line">        System.out.println(<span class="string">&quot;cf2结果-&gt;&quot;</span> + cf2.get());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Thread[ForkJoinPool.commonPool-worker-1,5,main] cf1 do something....</span></span><br><span class="line"><span class="comment">Thread[ForkJoinPool.commonPool-worker-1,5,main] cf2 do something....</span></span><br><span class="line"><span class="comment">上个任务结果：1</span></span><br><span class="line"><span class="comment">上个任务抛出异常：null</span></span><br><span class="line"><span class="comment">cf2结果-&gt;3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="多任务组合处理">多任务组合处理</h3><p><img src="https://z4a.net/images/2023/09/12/image-20230804102340783.png" alt="image-20230804102340783"></p><ul><li><p>AND组合</p><p>thenCombine / thenAcceptBoth / runAfterBoth都表示：<strong>将两个CompletableFuture组合起来，只有这两个都正常执行完了，才会执行某个任务</strong>。</p><p>区别在于：</p><ul><li>thenCombine：会将两个任务的执行结果作为方法入参，传递到指定方法中，且<strong>有返回值</strong></li><li>thenAcceptBoth: 会将两个任务的执行结果作为方法入参，传递到指定方法中，且<strong>无返回值</strong></li><li>runAfterBoth 不会把执行结果当做方法入参，且没有返回值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException &#123;</span><br><span class="line">    <span class="comment">//CompletableFuture.completedFuture 是 CompletableFuture 类的一个静态方法，它可以用于创建一个已经完成（已经执行完毕）的 CompletableFuture。</span></span><br><span class="line">        CompletableFuture&lt;String&gt; first = CompletableFuture.completedFuture(<span class="string">&quot;第一个异步任务&quot;</span>);</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        CompletableFuture&lt;String&gt; future = CompletableFuture</span><br><span class="line">                <span class="comment">//第二个异步任务</span></span><br><span class="line">                .supplyAsync(() -&gt; <span class="string">&quot;第二个异步任务&quot;</span>, executor)</span><br><span class="line">                <span class="comment">// thenCombineAsync(第一个异步任务，(第二个异步任务的返回值，第一个异步任务的返回值))</span></span><br><span class="line">                .thenCombineAsync(first, (s, w) -&gt; &#123;</span><br><span class="line">                    System.out.println(w);</span><br><span class="line">                    System.out.println(s);</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;两个异步任务的组合&quot;</span>;</span><br><span class="line">                &#125;, executor);</span><br><span class="line">        System.out.println(future.join());</span><br><span class="line">        executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第一个异步任务</span></span><br><span class="line"><span class="comment">第二个异步任务</span></span><br><span class="line"><span class="comment">两个异步任务的组合</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>OR组合</p><p>applyToEither / acceptEither / runAfterEither 都表示：将两个CompletableFuture组合起来，<strong>只要其中一个执行完了</strong>,就会执行某个任务。</p><p>区别在于：</p><ul><li>applyToEither：会将已经执行完成的任务，作为方法入参，传递到指定方法中，且<strong>有返回值</strong></li><li>acceptEither: 会将已经执行完成的任务，作为方法入参，传递到指定方法中，且<strong>无返回值</strong></li><li>runAfterEither： 不会把执行结果当做方法入参，且没有返回值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//第一个异步任务，休眠2秒，保证它执行晚点</span></span><br><span class="line">CompletableFuture&lt;String&gt; first = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">Thread.sleep(<span class="number">2000L</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;执行完第一个异步任务&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;第一个任务异常&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;第一个异步任务&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line">CompletableFuture&lt;Void&gt; future = CompletableFuture</span><br><span class="line"><span class="comment">//第二个异步任务</span></span><br><span class="line">.supplyAsync(() -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;执行完第二个任务&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;第二个任务&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">, executor)</span><br><span class="line"><span class="comment">//第三个任务</span></span><br><span class="line">.acceptEitherAsync(first, System.out::println, executor);</span><br><span class="line"></span><br><span class="line">executor.shutdown();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">执行完第二个任务</span></span><br><span class="line"><span class="comment">第二个任务</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>AllOf</p><p>所有任务都执行完成后，才执行 allOf返回的CompletableFuture。如果任意一个任务异常，allOf的CompletableFuture，执行get方法，会抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException,InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;Void&gt; a = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我执行完了&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">CompletableFuture&lt;Void&gt; b = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我也执行完了&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">CompletableFuture&lt;Void&gt; allOfFuture = CompletableFuture.allOf(a, b).whenComplete((m,k) -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;finish&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">我执行完了</span></span><br><span class="line"><span class="comment">我也执行完了</span></span><br><span class="line"><span class="comment">finish</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>AnyOf</p><p>任意一个任务执行完，就执行anyOf返回的CompletableFuture。如果执行的任务异常，anyOf的CompletableFuture，执行get方法，会抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">CompletableFuture&lt;Void&gt; a = CompletableFuture.runAsync(()-&gt;&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//延时</span></span><br><span class="line">Thread.sleep(<span class="number">3000L</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;我执行完了&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">CompletableFuture&lt;Void&gt; b = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我也执行完了&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">CompletableFuture&lt;Object&gt; anyOfFuture = CompletableFuture.anyOf(a, b).whenComplete((m,k)-&gt;&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;finish&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">anyOfFuture.join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>thenCompose</p><p>thenCompose方法会在某个任务执行完成后，将该任务的执行结果,作为方法入参,去执行指定的方法。该方法会返回一个新的CompletableFuture实例</p><ul><li>如果该CompletableFuture实例的result不为null，则返回一个基于该result新的CompletableFuture实例；</li><li>如果该CompletableFuture实例为null，然后就执行这个新任务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        CompletableFuture&lt;String&gt; f = CompletableFuture.completedFuture(<span class="string">&quot;第一个任务&quot;</span>);</span><br><span class="line">        <span class="comment">//第二个异步任务</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line">        CompletableFuture&lt;String&gt; future = CompletableFuture</span><br><span class="line">                .supplyAsync(() -&gt; <span class="string">&quot;第二个任务&quot;</span>, executor)</span><br><span class="line">                .thenComposeAsync(data -&gt; &#123;</span><br><span class="line">                    System.out.println(data); <span class="keyword">return</span> f; <span class="comment">//使用第一个任务作为返回</span></span><br><span class="line">                &#125;, executor);</span><br><span class="line">        System.out.println(future.join());</span><br><span class="line">        executor.shutdown();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第二个任务</span></span><br><span class="line"><span class="comment">第一个任务</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><p><a href="https://juejin.cn/post/6970558076642394142">异步编程利器：CompletableFuture详解 ｜Java 开发实战</a></p><p><a href="https://blog.csdn.net/zsx_xiaoxin/article/details/123898171">CompletableFuture使用详解（全网看这一篇就行）_supplyasync_代码搬运工阿新的博客-CSDN博客</a></p><p><a href="https://tech.meituan.com/2022/05/12/principles-and-practices-of-completablefuture.html">【美团】CompletableFuture原理与实践-外卖商家端API的异步化</a></p><p>问题：</p><ol><li><p>completablefuture和@Async的区别</p><blockquote><p><code>CompletableFuture</code> 和 <code>@Async</code> 是 Java 编程中用于实现异步操作的两种不同的方式。它们的主要区别在于实现方式和使用场景。</p><ol><li><p><strong>CompletableFuture</strong>: <code>CompletableFuture</code> 是 Java 8 中引入的类，用于实现异步编程和处理异步操作的结果。它提供了一种函数式的方式来处理异步操作的结果，允许您以链式的方式组合多个异步操作。您可以将多个 <code>CompletableFuture</code> 对象组合成一个更大的异步操作流，通过调用方法如 <code>thenApply</code>, <code>thenCompose</code>, <code>thenCombine</code> 等来定义操作的顺序和依赖关系。</p><p>优点：</p><ul><li>提供了丰富的方法来处理异步操作的结果。</li><li>可以轻松地构建复杂的异步操作流。</li><li>提供了异常处理机制，可以在异步操作中捕获和处理异常。</li></ul><p>使用场景：</p><ul><li>处理复杂的异步操作流程。</li><li>需要更多的灵活性和控制异步操作的结果处理方式。</li></ul></li><li><p><strong>@Async</strong>: <code>@Async</code> 是 Spring 框架提供的注解，用于在 Spring 管理的应用中实现异步方法调用。通过在方法上添加 <code>@Async</code> 注解，Spring 将会为这个方法创建一个新的线程来执行，并且不会阻塞主线程。您需要在配置中启用异步执行的功能，并确保 Spring 上下文正确地处理异步方法。</p><p>优点：</p><ul><li>简化了异步操作的实现，只需通过注解就可以完成异步调用。</li><li>适用于 Spring 环境中的异步操作。</li></ul><p>使用场景：</p><ul><li>在 Spring 应用中实现简单的异步操作，如发送电子邮件、生成报告等。</li></ul></li></ol><p>综上所述，<code>CompletableFuture</code> 更适合在 Java 编程中处理复杂的异步操作流程，而 <code>@Async</code> 更适用于在 Spring 框架中实现简单的异步方法调用。您可以根据具体的需求选择适合的方法来实现异步操作。在某些情况下，您甚至可以将它们结合使用，例如在 Spring 应用中使用 <code>CompletableFuture</code> 来构建更复杂的异步操作流程。</p></blockquote></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;CompletableFuture&lt;/h1&gt;
&lt;h3 id=&quot;回顾Future&quot;&gt;回顾Future&lt;/h3&gt;
&lt;p&gt;Future可以实现异步并行调用，如下面这段代码&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>24届暑期实习求职经历总结</title>
    <link href="http://example.com/2023/07/26/24%E5%B1%8A%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2023/07/26/24%E5%B1%8A%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/</id>
    <published>2023-07-26T13:00:33.187Z</published>
    <updated>2023-07-26T13:00:49.714Z</updated>
    
    <content type="html"><![CDATA[<h1>24届暑期实习求职经历总结</h1><p>个人情况：末9 本科 成绩前30%</p><p>持续时间：3.14-5.18</p><p>最后是拿到了招联金融开发岗的offer，直接开摆</p><h3 id="寒假阶段">寒假阶段</h3><p>主要工作：复习专业课、完善项目、准备简历</p><p>由于疫情原因22年末的寒假放的很早，期末考试推迟到了23年初进行，正好寒假就一边准备期末一边准备找实习，主要工作就是完善之前做过的项目和复习计算机网络（顺带也抽时间看了看操作系统），也算是为找实习打下了一点点基础。寒假期间也花了两天时间磨出来了一份还算可以的简历（包括根据简历写一份成文的自我介绍、将简历涉及的各个知识点简要的列出来），后续的简历修改都建立在了这份简历的基础上。</p><h3 id="3月中旬">3月中旬</h3><p>主要工作：修改简历，逐渐开始投简历，准备笔面试</p><p>之前一直觉得自己没有准备充分，虽然春招开始了一段时间，但是一直不敢投简历，处于一个非常纠结的状态。直到同学已经过了阿里的一面，我才开始觉得不能再等了，从此正式进入了找暑期实习的时期。第一份简历投给了阿里，当时牛客上全是阿里的hr在招人，感觉起码收到了30个hr发来的消息（群发），当时还天真的以为经济复苏，阿里要扩招了…</p><p>由于是学长的内推（顺便还请学长做了面试辅导），投递没多久就收到了面试邀请。第一次面试直接被疯狂拷打，并且和面试官的沟通上可能有一些障碍，我们经常不能理解对方的意思…周四晚上问完技术问题大概用了1h20min，紧接着又约了一个手撕的时间（据说笔试后50%要加试），又用了大概30min。最后也是不出意料的挂掉了，听学长说这个面试官级别也比较高，要求很严格，面试的时候经常问我优化的问题（真优化不出来啊…）。虽然结果不尽如人意，但是起码算没有遗憾吧：当时会的东西答得还不错，不会的也尽力蒙了。通过这次面试，确实认识到了自己的不足，也为之后的学习指引了方向。</p><p>阿里巴巴-1688-测试-一面：</p><blockquote><ol><li>选一个具体的模块，讲一下模块具体是做什么的，通过什么方式实现，碰到什么问题。比如数据存储，具体是怎么使用的。</li><li>你刚刚提到防疫政策的存储，防疫政策这个东西是什么维度的？政策最小的力度大概是到哪里，（经过沟通，是市维度的），数据量很大体现在哪，是数据的条数还是大小</li><li>政策入库几十条，主键是什么</li><li>除了redis，查询数据的维度是什么，    即你刚提到数据是市级的，用这个数据的对象是谁</li><li>在第一版还没有做存储升级的时候，使用量大概是什么样子的，或者说你们发现它的效率很差，是什么阶段发现的</li><li>用户具体怎么实现这个政策的查询</li><li>把所有的都展示出来的设计是有什么（认为会出现全部数据而不是所处地级市）</li><li>政策存储的化还是会有一些其他信息落到库里面的对吧</li><li>发现他的性能比较差的时候第一时间就想到了redis吗，还是说尝试过其他优化策略，因为我刚刚看你的数据量，就算百级好了，也不是非常大。</li><li>db本身要做这个优化的话，怎么做</li><li>在设计上有使用数据库索引吗</li><li>redis的优势，是什么让你选择了它</li></ol><p>（突然想起来主从复制，但是面试官说没什么用</p><ol start="13"><li>redis用到了什么存储结构，或者说键值对的键是什么，储存的内容是什么</li><li>除了字符串redis还支持什么数据结构</li><li>redis的热点问题（假设数据不会过期和失效），大多流量都打在了某个key或某几个key上，可能会导致什么问题</li><li>第二个项目为什么选到这个项目，人数，角色</li><li>简单讲一下实体关系抽取是怎么做的</li><li>数据集是怎么来的</li><li>所有你们的输入数据是一段话？最终输出是什么？是唯一的吗？原始输入是一段文字还是一句话？每个语句都会经过识别获取到一个关系吗？</li><li>因为你说你的工作是调研一些算法吗，那最终是你说去使用bert+crf的算法吗？</li><li>如果我这个模型训练的不太好，比如“湖南大学”识别除了给“湖”，没有意义，再去计算这个关系时，还会有什么效果吗？假设这个实体我已经识别出来了，我要去做一个关系的处理，会是怎么样去做的？</li><li>你提到你们的模型选用的是Google的模型是吗，你们的模型需要自己去训练吗</li><li>项目我们到这里，下面我们问一些基础的知识，我看你学过数据结构，栈和队列有什么区别。除了存储方面，还有什么区别，比如效率方面</li><li>你在日常开发中有用过队列和栈吗</li><li>两个栈实现一个队列（优化再优化）</li><li>新建一个字符串，你一般怎么做</li><li>String StringBuffer StringBulider的优缺点</li><li>有具体使用过吗，除了线程安全还有什么区别吗，或者从性能角度，使用场景</li><li>同样的字符串创建一百遍哪个更快</li><li>Linux系统有了解吗，你们的项目在哪开发，shell脚本了解吗，常用的Linux的命令</li><li>写shell：linux下面有一个文件，存了很多ip，一个ip一行，有很多重复，我要统计每个ip出现的次数</li><li>测试方面的问题：你写代码的时候会进行自测吗</li><li>有做过单元测试或者了解过什么单元测试的工具和框架吗</li><li>除了junit呢</li><li>假设我们要写一个单元用例，肯定要有一个校验点要写，就是需要写一个断言，你知道什么是断言吗</li><li>除了黑盒测试你还了解什么测试方法吗，白盒黑盒灰盒的区别</li></ol></blockquote><h3 id="三月下旬到四月上旬">三月下旬到四月上旬</h3><p>主要工作：复习八股，笔面试</p><p>经过上一次面试，本来决定先找点小厂练练手再去面大厂，结果小厂根本不给面试机会啊！！！最后没办法又投了蚂蚁（正好学长在群里要简历）。蚂蚁这边从开始做测评开始就很顺利，尤其是找规律的题目，可以算的上全秒了，笔试也人品爆发式的a出来了两个题目，学长还透露了他的领导对我评价很高（咱也不知道为啥哈哈哈），反正就一路顺风顺水的面完了二面，帮忙内推的学长都已经说了“我觉得你很稳，等来杭州了请你吃饭”。</p><p>不出意外的话这时候就要出意外了，在焦急的等待了一周后流程被系统自动终止了，经过打听知道二面给过了但是被组里的大leader直接挂掉了，没有给三面的机会…当时听到这个消息还是挺失望的，不过后来想想也还能接受吧，由于这个部门是支付宝的核心部门（面试官介绍支付宝的所有资金流转都和他们有关）而且又是Java研发，竞争肯定很激烈，前面估计有一些双9的大佬吧。</p><p>经过这两轮面试我感觉自己还是自信了不少的，起码真的有过leader看好自己哈哈哈哈，面试官也给了很多中肯的建议：比如将项目转化成实际的成果（专利、软著和论文）、注重在实践中学习等等。也是从这里，我认识到现在招聘网站上写到的“加分项”已经不单纯是加分项了，而是面试官非常希望你会的重点，比如：分布式、高并发等…</p><p>蚂蚁-支付宝事业线-支付宝(中国)-Java研发-一面：</p><blockquote><ol><li><p>你刚刚讲了第一个项目是软件工程的一个课设吗，通过这个项目你觉得一个软件的研发周期分为哪几个阶段</p></li><li><p>你认为你做的这个需求的核心逻辑是什么，是一个什么样的需求</p></li><li><p>在对这个需求进行建模的时候，你们里面设计了哪几张表，就是你的er模型是什么样的（实体关系是什么样）</p></li><li><p>除了用户表还有哪几张表，就是这几张表是什么样的关系（完全忘光了）</p></li><li><p>我确认一下你讲的这些表最开始的时候是你设计的吗</p></li><li><p>我再确认一下你们在做这个研发的时候你觉得表实体之间的关系模型设计实在整个软件研发的哪个阶段做的</p></li><li><p>我刚刚听你说在实际研发的时候没有完全按照这个表来，为什么</p></li><li><p>我问一个针对你用户表的问题，你这个用户表有哪些信息</p></li><li><p>这张表的用户的唯一性是用什么来决定的（用户id）</p></li><li><p>用户id的生成逻辑是什么样的</p></li><li><p>怎么确保每个用户的id是不一样的</p></li><li><p>你每个用户来注册的时候都会生成一个id对吗，那你们生成一个id除了算法保证之外，你是对算法完全可信还是会在代码里进一步确保不会出错</p></li><li><p>所以说你们完全信任这个算法给他生成一个id</p></li><li><p>我看你们用了redis做缓存，主要缓存了什么信息</p></li><li><p>redis有哪些优点</p></li><li><p>redis支不支持持久化（支持），是怎么实现的</p></li><li><p>我这边看你写了一个乐观锁，乐观锁主要用在一个什么逻辑下呢</p></li><li><p>为什么不用悲观锁</p></li><li><p>你觉得你们项目还可以改进的地方</p></li><li><p>对于这样一个系统，其实是和数据库打交道比较多的吗，我想和你聊一下数据库的事务，你讲一下事务的特点吧</p></li><li><p>场景题：在支付宝上面，我们从a账号往b账号转账，这个过程应该符合原子性和事务的一致性那你觉得整个的这样一个过程如果通过数据库的操作来描述，应该包含哪几步</p></li><li><p>如果同时a用户账户有100元，但是两笔扣款100元操作同时到达，怎么确保一个成功另一个失败</p></li><li><p>讲一下springboot的aop机制是什么逻辑，原理是什么</p></li><li><p>springboot 框架大概包含哪几个基础模块（不知道）</p></li><li><p>那你有没有看过spring的基础模块，他的基础模块有哪些</p></li><li><p>我看你这边其实是用了好多工具，你在日常用这些东西有没有看过他的一些源码或者底层实现（没）没看过的话那你是通过什么方式来学习和了解spring的</p></li><li><p>Java里面的hashmap的实现原理是什么样的</p></li><li><p>那hashmap是线程安全的吗</p></li><li><p>那我再问一下设计模式，常见的设计模式有哪几种</p></li><li><p>讲一个使用设计模式的案例</p></li><li><p>你基于pop3做过一个邮件系统，讲一下pop3这个协议是什么样子的</p></li><li><p>讲一下socket通信的原理</p></li><li><p>如果说客户端连接服务端，怎么判断他成功建立了连接</p></li><li><p>后面有读研打算吗</p></li><li><p>实习地和工作地的选择</p></li><li><p>为什么会这样排序</p></li><li><p>附加一个算法题：请实现 <code>copyRandomList</code> 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 <code>next</code> 指针指向下一个节点，还有一个 <code>random</code> 指针指向链表中的任意节点或者 <code>null</code>。</p></li></ol></blockquote><p>蚂蚁-支付宝事业线-支付宝(中国)-Java研发-二面：</p><blockquote><p>这次面试是钉钉的语音通话（没有录音），在面试前几天就加了面试官的好友，约了时间。这是我面试到现在面试体验最好的一次面试，面试官很温柔，全程都是聊天，我也讲了一些自己学习过程中的小故事（经历），不过最后还是问了两个技术问题，让我意识到现在的行情只会到springboot是远远不够了。</p><p>印象比较深刻的几个问题~</p><ul><li>你刚刚说你比较擅长操作系统和计算机网络，为什么这么说呢，是考试分数比较高还是哪些方面？</li><li>数据库的ER模型（一面就问了，当时不会，专门去看了）</li><li>乐观锁的应用</li><li>信息安全（简历上提到了，但是和他问的不是一个意思）主要指用户的数据安全，比如健康码不用了怎么处理数据…</li><li>问了第二个项目具体是干什么的</li><li>为什么用了谷歌的模型</li></ul><p>最后有三个技术问题，可以说都不怎么会…</p><ul><li>了解分布式锁吗</li><li>了解thread local吗</li><li>了解的并发的数据结构</li></ul></blockquote><h3 id="四月中旬到五月上旬">四月中旬到五月上旬</h3><p>主要工作：拓宽知识面、学习一些分布式的相关知识（cap理论、zookeeper、分布式锁等）、疯狂笔试</p><p>从这时候开始面试机会就变少，身边也开始有几个同学拿到了满意的offer，逐渐焦急…说好的金三银四怎么连面试都没有啊，大概三四个星期只有恒生给了一个15min的面试机会（无下文），蚂蚁其他部门捞了一次（被薄纱）。笔试的话倒是不少，还记得有一周每天晚上都在笔试，有点高中时候密度练的味道了…就这华子的笔试还没到人家的及格线，连泡池子的机会都没给。五一回了一次家，感觉爸妈甚至比我还焦虑，甚至认真思考了去国外读硕士的可能性…算是找实习历程中比较黑暗的一段时间吧。没有任何一家在流程中的时候真的会很焦虑，所以如果你在泡池子可以换个角度思考一下：没消息就是好消息~</p><p>提一下银行的技术岗面试：一般来说，面试时间（15-20min）会比大厂短一些，更注重应用能力（比如大厂可能会更多的问计网或者jvm之类的，银行可能更偏向springboot和mybatis），最后有些银行上班是要求穿正装的，如果你面试也按照这种服饰标准可能会给面试官留下更好的印象！</p><p>恒生-一面</p><blockquote><ol><li>自我介绍一分钟</li><li>redis的使用场景</li><li>redis和数据库的数据一致性如何保证</li><li>redis 的 缓存双删有了解吗</li><li>mybatis-plus 的 分页是如何实现的</li><li>Result工具类的封装和应用，泛式有了解吗</li><li>项目使用的乐观锁是如何实现的</li><li>场景题：有很多人一起抢奶茶，加锁，是加在抢的动作上还是奶茶上</li></ol></blockquote><p>蚂蚁-蚂蚁集团-CTO线-数据与平台技术事业群-智能交互技术部-一面</p><blockquote><ol><li><p>redis在项目中的具体作用</p></li><li><p>redis的数据结构</p><ol><li>redis的hash怎么实现</li><li>redis的string怎么实现</li><li>redis跳表了解过吗（不会了</li></ol></li><li><p>算法题 两数乘积 时间复杂度On （答案是用hash表来查找（O1）</p><p>就是两数之和的变式，但是当时两数之和实在太简单了，就没好好看优化，也没见过hash表的这种用法…没见过真的比较难想到啊</p></li><li><p>有若干大小相同的图片，如何把他们均匀的存到三台缓存服务器中</p></li></ol></blockquote><h3 id="五月中下旬">五月中下旬</h3><p>主要工作：疯狂笔面试，诸逆之战当放手一搏</p><p>上面有提到考虑出国读研，但是出国读研一是要有雅思（英语黑洞哭泣），二是起码要有一份对口的实习。所以趁着五月还有最后的机会，把能投的公司全都投了一遍，换来的是一周7场笔试5场面试（还有一些因为时间不合适鸽掉的没算进去）的魔鬼赛程。经过了一段睁眼算法闭眼八股的日子，总算是看到一丝曙光。</p><p>先是QQ浏览器捞起来进行了一次面试，终于打破了长时间没面试的窘境了，虽然面试问的很难，但是整体下来和面试官聊的还算开心，尽力局，认了。后面没多久美团和招联都约了面试，总算是把面试的状态激发出来了：美团是周五晚上进行了一面，还算比较顺利，周一早上九点多就约了二面，可惜二面的时候状态不太对（发烧ing），脑子也不太灵光，寄掉了；招联是周六一下午就面完，一面过了立马约二面，虽然当时感觉自己答得还不错，但是不清楚人家具体的招聘情况，也是提心吊胆了一周。最后招联成果oc，到实习群才发现一共就30个实习生（全部岗位），而且学校基本全是985，本硕未知（总而言之看上去都比我强），这能排到我也真是奇迹，我宣布招联就是我心目中的第一大厂！！！</p><p>腾讯-pcg-QQ浏览器-一面</p><blockquote><ol><li>乐观锁的实现（version）</li><li>除了数据库加字段还有什么方式（compare and swap）</li><li>CAS有什么实现方式（知道自旋锁，不太了解）</li><li>synchronized和lock是什么锁</li><li>synchronized和lock的区别</li><li>lock加上static和不加有什么区别</li><li>synchronized随JDK升级的优化</li><li>了解的并发容器</li><li>了解AQS吗</li><li>了解分布式锁吗</li><li>除了zookeeper还有什么实现方式</li><li>redis实现和zookeeper有什么区别，哪个更可靠（从CAP的角度考虑）</li><li>zookeeper主节点挂掉了多久之后会有新的</li><li>项目部署了吗？访问量（？）</li><li>redis用来干了什么</li><li>redis是自己搭建的吗，有几个节点</li><li>验证码的key是手机号吗，可能会泄露用户数据啊，如何改进（加密）</li><li>有什么加密算法可以来做</li><li>在项目中除了key-value还用到什么结构，或者redis还有什么其他结构</li><li>如何实现一共排行榜（zset）</li><li>redis的主从复制有了解吗，是怎么实现的</li><li>redis的持久化</li><li>springboot的启动流程</li><li>当有请求来到的时候springboot是如何处理的（MVC？经过了哪些类？）</li><li>项目如何区分来自小程序和网页的请求（？）</li><li>http的请求结构（请求头、请求体详情…）追：如何标识不同浏览器</li><li>tcp的请求头有什么？tcp头有多少字节？</li><li>线程池的参数</li><li>为什么没有选用Netty这些框架，选用了原生socket</li><li>为什么选用了缓冲线程池</li><li>有一万个用户如何设置线程池（手动创建），如何设置参数</li><li>你提到给每个socket一个线程，如果socket连接的时候收到阻塞，会影响后面的socket连接吗，如何解决（serversocket的连接数量限制？没太理解，我觉得不太会有这个问题）</li><li>除了用线程池，还有什么实现方式</li></ol></blockquote><p>美团-到家-研发平台-iOS-一面</p><blockquote><p>居然没有自我介绍</p><ol><li><p>讲一下OSI的每一层和他的作用</p></li><li><p>http属于哪一层</p></li><li><p>TCP三次握手</p></li><li><p>get和post的区别</p></li><li><p>http和https的区别</p></li><li><p>https怎么加密通信</p></li><li><p>数字证书的组成信息（只说了数字签名+密钥…）</p></li><li><p>数字证书如何验证（现在看不是很清楚他想问什么，我说了数字证书的验证过程，他也没继续问，答案：<a href="https://xiaolincoding.com/network/2_http/https_rsa.html#%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%AA%8C%E8%AF%81%E8%AF%81%E4%B9%A6">链接</a>）</p></li><li><p>对设计模式的了解</p></li><li><p>死锁了解吗</p></li><li><p>线程和进程的区别</p></li><li><p>当一个线程挂了会对其他线程产生影响吗</p></li><li><p>当一个进程挂了会对其他进程产生影响吗</p></li><li><p>你项目中遇到的有挑战问题，如何解决的（redis）</p></li><li><p>缓存之前时间主要花在哪，是url请求吗</p></li></ol><p>（面试官主要搞ios，对redis不是特别了解，按照他在互联网混迹多年的理解来推理的，所以我答的也不一定是他想知道的）</p><ol start="16"><li>redis的更新策略</li><li>redis对大规模缓存的限制</li><li>redis的内存淘汰策略</li><li>算法：青蛙跳台阶（dp）</li></ol></blockquote><p>美团-到家-研发平台-iOS-二面</p><blockquote><p>项目中的角色 作用</p><ol><li>Java的反射</li><li>Java的内存管理机制</li><li>Java的类加载机制</li><li>Java的泛型</li></ol><p>答得不好直接寄了</p></blockquote><p>招联-开发-一二面</p><blockquote><p>下午4：03开始的一面，整体的问答节奏非常快，大概十分钟就结束了技术问题，面试结束后十分钟不到就通知了二面</p><p>一面</p><ol><li>Spring的AOP是怎么实现的</li><li>动态代理的实现方式</li><li>AOP什么时候失效</li><li>你提到你写过很多文档，在写文档的时候有什么总结和规范吗</li><li>多线程有用过吗（有），线程池的使用和参数</li><li>项目中遇到的难题</li><li>Java中的深拷贝和浅拷贝</li><li>深拷贝什么时候使用呢</li><li>你对hash表有什么了解吗</li><li>hash表的扩容是怎么实现的</li><li>hash表的线程安全是怎么实现的</li><li>如何不用Java中的锁来实现线程安全</li><li>你对分布式锁还有什么了解</li><li>对消费金融有了解吗</li><li>成绩，打算读研吗</li><li>为什么选择深圳</li><li>想在实习中收获什么</li></ol><p>二面</p><p>记不大清了，没什么技术问题</p><ol><li><p>成绩</p></li><li><p>为什么找工作</p></li><li><p>还面过哪些公司</p></li><li><p>项目中的难点</p></li><li><p>对招联的了解</p><p>剩下的和一面的非技术问题差不多</p></li></ol><p>反问问过的：</p><ol><li>多久出结果</li><li>部门业务</li><li>对实习生品质的期待</li><li>实习生干什么</li></ol></blockquote><p>后面接了offer又有一些厂约面试了，卷不动了（而且待遇也一般）全拒了，暑期实习面试就到此为止吧！我滴任务完成辣！</p><h3 id="心得体会">心得体会</h3><p>一点拙见，各位看个乐~</p><ul><li>（和美团面试官聊天的时候说的）暑期实习对同学的要求可能没那么高，大家都是从那时候过来的，知道这个阶段水平都不算很高，更注重的可能还是能不能和大家友好沟通友好相处。人家招你进来是当同事的，而且很有可能会负责在实习的时候带你，如果面试的时候你们都聊的不开心怎么可能通过捏？</li><li>简历上的东西一定要完全掌握，甚至可以适当的给面试官“下套”，聊一些你擅长的东西，将问题转化成话题，唠起来，把面试的主动权掌握在自己手里，总比面试官不知道问什么而开始随机八股问答要好。</li><li>头几次面试大家难免都会紧张，如果面试不太顺利也不要慌，面试后及时复盘，把面试官问到的问题做一些总结，在一次次面试中获得提高。可以想象成获得了一次和年薪大几十万的优秀学长聊天的机会，他来帮你查缺补漏，机会难得啊！</li><li>最后，面试就像相亲，确实包含着很多运气成分，是双方双向选择的一个过程，如果面试官态度冷淡，你也不用感到自责愧疚，双方看不对眼而已，你肯定也不希望来到这样的环境来工作吧？</li></ul><h3 id="学习资料">学习资料</h3><p>珍藏八股：</p><p><a href="http://www.cyc2018.xyz/">CS_Notes</a>（精简）</p><p><a href="https://pdai.tech/">pdai</a>（全面、深入）</p><p><a href="https://javaguide.cn/">JavaGuide</a>（偏基础，适合新手看）</p><p><a href="https://xiaolincoding.com/">小林coding</a>（主打图解）</p><p><a href="https://www.programmercarl.com/">代码随想录</a>（算法）</p><p>招聘渠道：</p><p>投递一定要去官网！！！牛客和boss上很多都不理人，体验极差</p><p><a href="https://www.nowcoder.com/users/5641152">牛客吹哨人</a>（不定期更新招聘信息）</p><p>校招帮小程序（好像被恶意举报了）</p><p>我投过的公司：</p><blockquote><p>投递过的部分公司<br>恒生 阿里 网易 广发 携程 核桃编程 爱奇艺 交银金科 oppo  vivo 百度 快手 蚂蚁 华为 京东 顺丰 SHEIN 虹软 吉利 中欧基金 虎牙 众安 美团 商汤 用友 cvte 东方财富 网易有道 腾讯 平安银行 中国人寿 光大银行 招联 360 海信 上汽  江苏银行  宁德时代  北森  恒丰银行  华夏基金  快手 宁波银行 奇安信 特斯拉 兴业银行  海康威视  广汽  台积电   长安汽车  上汽   新华三</p></blockquote><p>最后感谢一下一路push我的伙伴们，有一群有着共同目标、一起努力的伙伴真的很幸运！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;24届暑期实习求职经历总结&lt;/h1&gt;
&lt;p&gt;个人情况：末9 本科 成绩前30%&lt;/p&gt;
&lt;p&gt;持续时间：3.14-5.18&lt;/p&gt;
&lt;p&gt;最后是拿到了招联金融开发岗的offer，直接开摆&lt;/p&gt;
&lt;h3 id=&quot;寒假阶段&quot;&gt;寒假阶段&lt;/h3&gt;
&lt;p&gt;主要工作：复习专业课、</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>二分查找</title>
    <link href="http://example.com/2023/07/26/0506-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <id>http://example.com/2023/07/26/0506-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</id>
    <published>2023-07-26T12:56:01.715Z</published>
    <updated>2023-07-26T12:56:16.217Z</updated>
    
    <content type="html"><![CDATA[<h1>二分查找</h1><p>二分查找是一种比较基础的算法，思路类似于小游戏-猜出0-100的某个数字，适用于<strong>数组有序</strong>的情况。二分查找<strong>不一定</strong>会比暴力方法快，二者都是不稳定的，具体用时和数据有关系。</p><p>二分查找的思路很简单，但是在真正去写二分查找时，会发现他的边界条件很难把控。</p><p>例题：</p><p><a href="https://leetcode.cn/problems/binary-search/">704. 二分查找</a></p><p>给定一个 <code>n</code> 个元素有序的（升序）整型数组 <code>nums</code> 和一个目标值 <code>target</code> ，写一个函数搜索 <code>nums</code> 中的 <code>target</code>，如果目标值存在返回下标，否则返回 <code>-1</code>。</p><p><strong>提示：</strong></p><ol><li>你可以假设 <code>nums</code> 中的所有元素是不重复的。</li><li><code>n</code> 将在 <code>[1, 10000]</code>之间。</li><li><code>nums</code> 的每个元素都将在 <code>[-9999, 9999]</code>之间。</li></ol><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [-1,0,3,5,9,12], target = 9</span><br><span class="line">输出: 4</span><br><span class="line">解释: 9 出现在 nums 中并且下标为 4</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [-1,0,3,5,9,12], target = 2</span><br><span class="line">输出: -1</span><br><span class="line">解释: 2 不存在 nums 中因此返回 -1</span><br></pre></td></tr></table></figure><p>分享一下个人的思路：</p><ol><li>记录目前可能最大和最小可能值的位置min（初始 0）、max（初始 length-1）</li><li>取最中间的位置（max+min），与target进行比较</li><li>若小于target，则min = 现在的位置+1、若大于target，则max = 现在的位置-1</li><li>当前位置 =（max+min）/ 2，循环，直至找到target或者max&lt;min</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> (max+min)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(min&lt;=max)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[p] == target)&#123;</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[p]&lt;target)&#123;</span><br><span class="line">                min = p+<span class="number">1</span>;</span><br><span class="line">                p = (min+max)/<span class="number">2</span>;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[p]&gt;target)&#123;</span><br><span class="line">                max = p-<span class="number">1</span>;</span><br><span class="line">                p = (max+min)/<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然有些时候我们脑子不太清醒，可能想不清楚边界关系，那也没逝分享一个自己的小寄巧：记录一下这个值有没有被比较过（不推荐使用，属于是没办法的办法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="comment">//创建一个等长的数组，比较过对应位置改位1，否则保持0</span></span><br><span class="line">        <span class="type">int</span>[] search = <span class="keyword">new</span> <span class="title class_">int</span>[length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> length/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[p] == target)&#123;</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[p]&lt;target&amp;&amp;search[p]==<span class="number">0</span>)&#123;</span><br><span class="line">                search[p] = <span class="number">1</span>;</span><br><span class="line">                min = p;</span><br><span class="line">                p = (p+max)/<span class="number">2</span>;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[p]&gt;target&amp;&amp;search[p]==<span class="number">0</span>)&#123;</span><br><span class="line">                search[p] = <span class="number">1</span>;</span><br><span class="line">                max = p;</span><br><span class="line">                p = (p+min)/<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;二分查找&lt;/h1&gt;
&lt;p&gt;二分查找是一种比较基础的算法，思路类似于小游戏-猜出0-100的某个数字，适用于&lt;strong&gt;数组有序&lt;/strong&gt;的情况。二分查找&lt;strong&gt;不一定&lt;/strong&gt;会比暴力方法快，二者都是不稳定的，具体用时和数据有关系。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>KMP</title>
    <link href="http://example.com/2023/07/26/0512-KMP/"/>
    <id>http://example.com/2023/07/26/0512-KMP/</id>
    <published>2023-07-26T12:56:01.713Z</published>
    <updated>2023-07-26T12:57:32.541Z</updated>
    
    <content type="html"><![CDATA[<h1>KMP</h1><p>KMP是用来处理字符串匹配问题的一种高效方法</p><p><a href="https://link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/implement-strstr">例题</a>：找出字符串中第一个匹配项的下标</p><p>给你两个字符串 <code>haystack</code> 和 <code>needle</code> ，请你在 <code>haystack</code> 字符串中找出 <code>needle</code> 字符串的第一个匹配项的下标（下标从 0 开始）。如果 <code>needle</code> 不是 <code>haystack</code> 的一部分，则返回 <code>-1</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：haystack = &quot;sadbutsad&quot;, needle = &quot;sad&quot;</span><br><span class="line">输出：0</span><br><span class="line">解释：&quot;sad&quot; 在下标 0 和 6 处匹配。</span><br><span class="line">第一个匹配项的下标是 0 ，所以返回 0 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：haystack = &quot;leetcode&quot;, needle = &quot;leeto&quot;</span><br><span class="line">输出：-1</span><br><span class="line">解释：&quot;leeto&quot; 没有在 &quot;leetcode&quot; 中出现，所以返回 -1 。</span><br></pre></td></tr></table></figure><p>如果按照原始的暴力方法，算法复杂度将达到O（n*m），而KMP算法可以将复杂度降低到O（n+m）。</p><p>KMP算法主要由两步构成</p><h3 id="第一步：构造needle字符串的next数组">第一步：构造needle字符串的next数组</h3><p>next数组主要用来记录当前字符串的最长前后缀有几位，比如字符串a b c d a b d 的next数组就是0 0 0 0 1 2 0</p><p>当字符串为abcd时，前后缀一点也不一样；当字符串为abcda时，字符串的开头和结尾都是a，所以next数组就是1；同理，abcdab则是对应2…</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] getNext(String s)&#123;</span><br><span class="line"><span class="type">int</span>[] next = <span class="keyword">new</span> <span class="title class_">int</span>[s.length()];</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">next[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//A B C D A B D</span></span><br><span class="line"><span class="comment">//i初始值为1，否则i j相等</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;s.length();i++)&#123;</span><br><span class="line"><span class="comment">//j等于0时，说明之前还没出现过相等的前缀和后缀</span></span><br><span class="line"><span class="keyword">while</span> (j&gt;<span class="number">0</span>&amp;&amp;s.charAt(i)!=s.charAt(j))&#123;</span><br><span class="line">j = next[j-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当两个位置的字符相同时，说明是相同的前后缀</span></span><br><span class="line"><span class="keyword">if</span> (s.charAt(i)==s.charAt(j))&#123;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">next[i]=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二步：与haystack进行比较">第二步：与haystack进行比较</h3><p>从头开始比较haystack和needle字符串，相等时j++；不相等时，按照needle的next数组，将needle字符串后移next[j-1]位</p><p>例如：haystack为abxabcabcaby，needle为abcaby，当haystack的第9位和needle的第6位进行比较时，发现不相等，这是j将变为next[5]=2，因为当needle可以匹配到第二位时，说明必有ab，所以下次匹配时可以从needle的第三位开始匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack,String needle)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (needle.length()==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">       <span class="comment">//得next数组</span></span><br><span class="line"><span class="type">int</span>[] next = getNext(needle);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;haystack.length();i++)&#123;</span><br><span class="line"><span class="keyword">while</span> (j&gt;<span class="number">0</span>&amp;&amp;haystack.charAt(i)!=needle.charAt(j))&#123;</span><br><span class="line">j = next[j-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (haystack.charAt(i)==needle.charAt(j))&#123;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j==needle.length())&#123;</span><br><span class="line"><span class="keyword">return</span> i-j+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;KMP&lt;/h1&gt;
&lt;p&gt;KMP是用来处理字符串匹配问题的一种高效方法&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/implement-strstr&quot;&gt;例</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java 的 动态代理入门</title>
    <link href="http://example.com/2023/07/26/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2023/07/26/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%85%A5%E9%97%A8/</id>
    <published>2023-07-26T12:49:24.466Z</published>
    <updated>2023-07-26T12:50:24.335Z</updated>
    
    <content type="html"><![CDATA[<h1>Java 的 动态代理入门</h1><p>Java的动态代理是一种在运行时动态生成代理对象的机制，可以在不修改源代码的情况下，为类和接口创建代理对象，并在代理对象上实现一些自定义的逻辑，例如日志记录、安全控制、性能监控等。Java的动态代理通过反射机制实现，在运行时动态生成代理类，从而实现代理功能。</p><p>JDK动态代理主要涉及以下两个类：</p><ol><li><code>java.lang.reflect.InvocationHandler</code>：定义了一个代理对象要执行的操作，即代理逻辑。该接口只有一个方法<code>invoke</code>，在代理对象调用方法时，会自动回调该方法。</li><li><code>java.lang.reflect.Proxy</code>：提供了创建动态代理对象的方法。该类有一个静态方法<code>newProxyInstance</code>，该方法接收一个<code>ClassLoader</code>对象、一组接口和一个<code>InvocationHandler</code>对象作为参数，返回一个代理对象。</li></ol><p>在使用Java动态代理时，需要先创建一个实现了<code>InvocationHandler</code>接口的类，在该类中实现代理逻辑，然后使用<code>Proxy</code>类的<code>newProxyInstance</code>方法创建代理对象。</p><p>动态代理有许多应用场景，例如AOP编程、RPC调用、对象持久化等。相比于静态代理，动态代理具有更好的灵活性和可扩展性，同时也减少了代码的重复性。</p><h3 id="实例">实例</h3><ol><li>创建接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SmsService</span> &#123;</span><br><span class="line"> String <span class="title function_">send</span><span class="params">(String message)</span>;</span><br><span class="line"> String <span class="title function_">receive</span><span class="params">(String message)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>实现接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SmsService</span>&#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">send</span><span class="params">(String message)</span> &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;message :&quot;</span> + message);</span><br><span class="line">  <span class="keyword">return</span> message;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">receive</span><span class="params">(String message)</span> &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;receive :&quot;</span> + message);</span><br><span class="line">  <span class="keyword">return</span> message;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>定义一个JDK动态代理类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DebugInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> Object target;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">DebugInvocationHandler</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.target = target;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">  <span class="comment">//当前调用的方法名</span></span><br><span class="line">  System.out.println(method);</span><br><span class="line">  <span class="comment">//调用前添加的操作</span></span><br><span class="line">  System.out.println(<span class="string">&quot;before method &quot;</span>+method.getName());</span><br><span class="line">  <span class="comment">//当我们的动态代理对象调用原生方法的时候，实际上是调用到了invoke方法，然后invoke方法代替我们去调用了被代理对象的原生方法</span></span><br><span class="line">  <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target,args);</span><br><span class="line">  <span class="comment">//调用后添加的操作</span></span><br><span class="line">  System.out.println(<span class="string">&quot;after method &quot;</span>+method.getName());</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>获取代理对象的工厂类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdkProxyFactory</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getProxy</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">     <span class="comment">//通过Proxy.newProxyInstance()获取到某个类的代理对象</span></span><br><span class="line">  <span class="keyword">return</span> Proxy.newProxyInstance(</span><br><span class="line">    target.getClass().getClassLoader(),<span class="comment">//目标类的类加载</span></span><br><span class="line">    target.getClass().getInterfaces(),<span class="comment">//代理需要实现的接口</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">DebugInvocationHandler</span>(target)<span class="comment">//代理对象对应的自定义InvocationHandle</span></span><br><span class="line">  );</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>使用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="type">SmsService</span> <span class="variable">smsService</span> <span class="operator">=</span> (SmsService) JdkProxyFactory.getProxy(<span class="keyword">new</span> <span class="title class_">SmsServiceImpl</span>());</span><br><span class="line">     <span class="comment">//创建代理对象后，我们调用的方法先被转发到对应InvocationHandler中的invoke方法，再由invoke方法调用原生方法</span></span><br><span class="line">  smsService.send(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">  smsService.receive(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CGLIB</p><h3 id="静态代理和动态代理的对比">静态代理和动态代理的对比</h3><p>灵活性：动态代理更加灵活，不需要必须实现接口，可以直接代理实现类，并且可以不需要针对每个目标类都创建一个代理类。另外，静态代理中，接口一旦新增加方法，目标对象和代理对象都要进行修改，这是非常麻烦的！</p><p>JVM 层面 ：静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。而动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。</p><p>参考</p><p><a href="https://www.yuque.com/snailclimb/gsmusc/dee3in">07 静态代理+JDK/CGLIB 动态代理实战 (yuque.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Java 的 动态代理入门&lt;/h1&gt;
&lt;p&gt;Java的动态代理是一种在运行时动态生成代理对象的机制，可以在不修改源代码的情况下，为类和接口创建代理对象，并在代理对象上实现一些自定义的逻辑，例如日志记录、安全控制、性能监控等。Java的动态代理通过反射机制实现，在运行时动态</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第二次个人技能测试-VUE练习</title>
    <link href="http://example.com/2023/07/26/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%B8%AA%E4%BA%BA%E6%8A%80%E8%83%BD%E6%B5%8B%E8%AF%95-VUE%E7%BB%83%E4%B9%A0/"/>
    <id>http://example.com/2023/07/26/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%B8%AA%E4%BA%BA%E6%8A%80%E8%83%BD%E6%B5%8B%E8%AF%95-VUE%E7%BB%83%E4%B9%A0/</id>
    <published>2023-07-26T12:49:24.463Z</published>
    <updated>2023-07-26T12:50:02.877Z</updated>
    
    <content type="html"><![CDATA[<h1>第二次个人技能测试-VUE练习</h1><p>题目要求是这样滴</p><p><img src="https://z4a.net/images/2023/03/14/f683c85159c8b864c41bfdb516553473.png" alt="img"></p><p>我做的是这样滴</p><p><img src="https://z4a.net/images/2023/03/14/541f139f7949d2a89f43b81d6d7fdbbf.png" alt="img"></p><p>四舍五入可以算是有点相似（吧</p><p>vue和原生html的一大区别是：vue是由一个个组件拼接而成的，例如：</p><p><img src="https://z4a.net/images/2023/03/14/e089649969018062cfc6b1a08250cd2b.png" alt="img"></p><p>每个组件可以单独写在一个vue文件中，只需在App.vue文件中引用每个组件即可，这样大大增强了组件的复用性。</p><p>每个组件应该怎么写呢？其实基本上就是在template中写html。举个例子（组件1）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;first_box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;input_part&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;search_button&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;button&quot;</span>&gt;</span>查找<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;add_button&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span>&gt;</span>＋新建角色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>另外vue相较于html新加了许多新功能，例如v-for、v-if等</p><p>我是使用webstorm来 创建项目的，总体感觉使用起来还是挺简单的，没太多想写的了。</p><p><a href="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-7a58b0fa-a78d-4c4c-985f-fb09e45e3449/56b422d4-9cfc-4b05-9ce5-8dc4041d8f81.rar">源码链接</a></p><p>css文件复制到assets里，除了App.vue以外的vue文件复制到components里，App.vue替代原有的App.vue。只需要将文件复制到相应的位置即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;第二次个人技能测试-VUE练习&lt;/h1&gt;
&lt;p&gt;题目要求是这样滴&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://z4a.net/images/2023/03/14/f683c85159c8b864c41bfdb516553473.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>常见的查询优化器</title>
    <link href="http://example.com/2023/07/26/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E5%99%A8/"/>
    <id>http://example.com/2023/07/26/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E5%99%A8/</id>
    <published>2023-07-26T12:49:24.460Z</published>
    <updated>2023-07-26T12:49:46.103Z</updated>
    
    <content type="html"><![CDATA[<h1>常见的查询优化器</h1><h3 id="什么是查询优化器">什么是查询优化器</h3><p><img src="https://s1.ax1x.com/2023/03/14/pplhei9.png" alt="img"></p><p>数据库主要由三部分组成，分别是解析器、优化器和执行引擎，其中优化器是把关系表达式转换成执行计划的核心组件，很大程度上决定了一个系统的性能。</p><h3 id="查询优化器的分类">查询优化器的分类</h3><p>查询优化器主要分为两类，分别是：</p><p>RBO（基于规则的优化器，Rule-Based Optimizer）</p><p>CBO（基于规则的优化器，Cost-Based Optimizer）</p><h4 id="RBO">RBO</h4><ul><li>根据关系代数等价语义，重写查询</li><li>基于启发式规则：主流RBO实现一般都有几百条基于经验归纳得到的优化规则</li><li>会访问表的元信息，不会涉及具体的表的数据</li><li>实现简单，优化速度快，但不保证得到最优的执行计划</li></ul><h5 id="列裁剪">列裁剪</h5><p>列裁剪的基本思想在于：对于算子中实际用不上的列，优化器在优化的过程中没有必要保留它们。对这些列的删除会减少 I/O 资源占用，并为后续的优化带来便利。例如：</p><p>假设表 t 里面有 a b c 三列，执行语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a <span class="keyword">from</span> t <span class="keyword">where</span> b <span class="operator">&gt;</span><span class="number">5</span></span><br></pre></td></tr></table></figure><p>在查询过程中，只用到了表 t 中 a b 两列的数据，而 c 列的数据未被用到。因此对于 c 列，我们可以将它裁剪掉，读取数据的时候不需要将它读进来。</p><h5 id="谓词下推">谓词下推</h5><p>谓词下推将查询语句中的过滤表达式计算尽可能下推到距离数据源最近的地方，以尽早完成数据的过滤，进而显著地减少数据传输或计算的开销。例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> A <span class="keyword">Join</span> B <span class="keyword">on</span> A.id <span class="operator">=</span> B.id <span class="keyword">where</span> A.a <span class="operator">&gt;</span><span class="number">10</span> <span class="keyword">and</span> B.b <span class="operator">&lt;</span><span class="number">100</span>;</span><br></pre></td></tr></table></figure><p>在处理Join操作之前需要首先对A和B执行Scan操作，然后再进行Join，再执行过滤，最后计算聚合函数返回，但是如果把过滤条件A.a &gt; 10和B.b &lt; 100分别移到A表的Scan和B表的Scan的时候执行，则可以大大减少Join操作的输入数据。优化后的语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> A  <span class="keyword">where</span> a<span class="operator">&gt;</span><span class="number">10</span>) <span class="keyword">as</span> A1 <span class="keyword">Join</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> B  <span class="keyword">where</span> b<span class="operator">&lt;</span><span class="number">100</span>) <span class="keyword">as</span> B1 <span class="keyword">on</span> A1.id <span class="operator">=</span> B1.id;</span><br></pre></td></tr></table></figure><h5 id="传递闭包">传递闭包</h5><p>将表的过滤条件传递，在表连接前对两个表的数据都完成筛选，从而减少Join操作的输入数据。</p><h5 id="Runtime-Filter">Runtime Filter</h5><p>Runtime Filter是通过在join前过滤掉那些不会命中join的输入数据来大幅减少join中的数据传输和计算，从而减少整体的执行时间。例如：</p><p><img src="https://s1.ax1x.com/2023/03/14/pplhnR1.jpg" alt="img"></p><p>如上图左半部分所示，在进行join运算的时候不仅需要把全量的sales数据传输到join算子里去，而且每一行sales数据都需要进行join运算（包括算哈希值、比较运算等）。这里如果items.price &gt; 100的选择率比较高，比如达到50%，那么sales表中的大部分数据是肯定不会被join上，如果提前进行过滤掉，可以减少数据的传输和计算的开销。</p><p>上图的右半部分则是加入了runtime filter之后的执行计划，从图中可以看到在进行join的build端拉取数据的过程中新增了一个RuntimeFilterBuilder的一个算子，这个算子的作用就是在运行的过程中收集build端的信息形成runtime filter，并且发送到probe端的scan节点中去，让probe端的节点可以在scan就减少输入的数据，从而实现性能的提升。</p><p>除此之外，还有Join消除、谓词合并等优化方式…</p><h4 id="CBO">CBO</h4><ul><li><p>使用一个模型估算执行计划的代价，选择代价最小的执行计划</p></li><li><ul><li>执行计划的代价等于所有算子的执行代价之和</li><li>通过RBO得到（所有）可能的等价执行计划</li></ul></li></ul><h5 id="统计信息">统计信息</h5><p>原始表统计信息：</p><p>表或分区级别：行数、行平均大小、表在磁盘中占用字节大小</p><p>列级别：min、max、num nulls、num not nulls、num distinct value（NDV）等</p><p>推导统计信息：</p><p>选择率（selectivity）：对于某一过滤条件，查询会从表中返回多大比例的数据</p><p>基数（cardinality）：在查询计划中指算子需要处理的行数</p><h5 id="执行计划枚举">执行计划枚举</h5><p>考虑事项：</p><p>单表扫描：索引扫描 or 全表扫描</p><p>Join的实现：Hash Join or Sort Merge Join</p><p>多表Join：哪种连接顺序最优</p><p>通常使用<strong>贪心算法</strong>或者<strong>动态规划</strong>选出最优的执行计划。</p><p>大数据场景下使用CBO对查询性能非常重要</p><p>刚开始学数据库时还觉得关系代数没什么用，这下终于知道关系代数在SQL优化中的重要作用了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;常见的查询优化器&lt;/h1&gt;
&lt;h3 id=&quot;什么是查询优化器&quot;&gt;什么是查询优化器&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2023/03/14/pplhei9.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;数据库主要由三部分组成，分别是</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ZooKeeper 入门</title>
    <link href="http://example.com/2023/07/26/ZooKeeper%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2023/07/26/ZooKeeper%E5%85%A5%E9%97%A8/</id>
    <published>2023-07-26T12:49:24.458Z</published>
    <updated>2023-07-26T12:55:26.116Z</updated>
    
    <content type="html"><![CDATA[<h1>ZooKeeper 入门</h1><h3 id="安装zookeeper">安装zookeeper</h3><ol><li>监测JDK环境</li></ol><p><img src="https://z4a.net/images/2023/03/14/a102ff8f45d84fe147fb076b0461aa06.png" alt="img"></p><p>配置环境变量</p><p><img src="https://z4a.net/images/2023/03/14/aeba807964295dba6400070fe0e6fd1d.png" alt="img"></p><ol><li>下载zookeeper</li></ol><p>下载地址：<a href="http://zookeeper.apache.org/">http://zookeeper.apache.org/</a></p><p>选择第一个（已经编译好的版本）</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b5ae327341ad27c9be3766232c4e9a87.png" alt="img"></p><p>解压，即可开始使用zookeeper</p><p><img src="https://z4a.net/images/2023/03/14/8a278ad6918d085ec629bd75b10081e2.png" alt="img"></p><p>以上目录称为<strong>home目录</strong></p><p>bin目录下为启动程序</p><p>conf目录下为配置文件</p><p>data目录（自己新建）为运行数据</p><p>logs目录下为运行日志</p><p><strong>安装完成</strong></p><h3 id="测试zookeeper">测试zookeeper</h3><ol><li>首先将conf目录下的zoo_sample.cfg文件赋值一份，命名为zoo.cfg</li></ol><p>打开zoo.cfg，将端口（clientPort）设置为2181（默认），一个端口只能同时给一个客户端提供服务</p><p><img src="https://z4a.net/images/2023/03/14/28beb811d7a1ab4c0025b5db1ad8d3c7.png" alt="img"></p><ol><li>在home目录下，执行bin\zkServer.sh start</li></ol><p><img src="https://z4a.net/images/2023/03/14/aea53410bbef3cd66730fb87e9474eee.png" alt="img"></p><p>弹窗显示如图，则启动成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//zkServer.sh的常用命令</span><br><span class="line">zkServer.sh start  //启动节点</span><br><span class="line">zkServer.sh stop   //停止节点</span><br><span class="line">zkServer.sh status //查看节点状态</span><br></pre></td></tr></table></figure><p>执行bin\zkCli.cmd localhost 2181,即可成功连接上node，输入命令进行测试即可</p><p><img src="https://z4a.net/images/2023/03/14/8e2637d27d844928a05cb8c052333b8d2045027f1624ea94.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">节点中常用命令</span><br><span class="line">ls /  显示子节点</span><br><span class="line">create /&lt;节点路径&gt; &lt;节点数据&gt;    新建节点</span><br><span class="line">get /&lt;节点路径&gt;读取节点数据</span><br><span class="line">set /&lt;节点路径&gt;设置节点数据</span><br><span class="line">delete /&lt;节点路径&gt;删除节点</span><br></pre></td></tr></table></figure><h3 id="多节点启动">多节点启动</h3><ol><li>在本机进行伪集群配置</li></ol><ul><li>在home目录下的data和logs文件夹下新建文件夹和文件</li></ul><p><img src="https://z4a.net/images/2023/03/14/68182813517d33def47fb61636aa0fb8.png" alt="img"></p><p>每个server&lt; x &gt;文件下新建一个myid文件</p><p><img src="https://z4a.net/images/2023/03/14/e8300cb8fbab703eee26c28ac75c73dd.png" alt="img"></p><p>zoo1.cfg 指向的写入 1，zoo2.cfg 指向的写 2，以此类推，切记不能随便添加空格</p><p><img src="https://z4a.net/images/2023/03/14/c540384b634af14145c703121da32f42.png" alt="img"></p><p>logs目录只需新建三个文件夹即可，用于存放每个节点的 日志</p><p><img src="https://z4a.net/images/2023/03/14/c02adec413903e2de358f9cdc85ab949.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;ZooKeeper 入门&lt;/h1&gt;
&lt;h3 id=&quot;安装zookeeper&quot;&gt;安装zookeeper&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;监测JDK环境&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://z4a.net/images/2023/03/14/a102f</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Windows下的Java版本管理--jabba</title>
    <link href="http://example.com/2023/07/26/Windows%E4%B8%8B%E7%9A%84Java%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86--jabba/"/>
    <id>http://example.com/2023/07/26/Windows%E4%B8%8B%E7%9A%84Java%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86--jabba/</id>
    <published>2023-07-26T12:49:24.455Z</published>
    <updated>2023-07-26T12:54:14.927Z</updated>
    
    <content type="html"><![CDATA[<h1>Windows下的Java版本管理–jabba</h1><p>jabba相关信息：</p><p>项目地址：<a href="https://github.com/shyiko/jabba">https://github.com/shyiko/jabba</a></p><p>参考文档：<a href="https://www.cjavapy.com/article/96/">https://www.cjavapy.com/article/96/</a></p><h4 id="安装">安装</h4><p>在管理员身份下的powershell执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Net.ServicePointManager]::SecurityProtocol =[Net.SecurityProtocolType]::Tls12</span><br><span class="line">Invoke-Expression (</span><br><span class="line">  Invoke-WebRequest https://github.com/shyiko/jabba/raw/master/install.ps1 -UseBasicParsing</span><br><span class="line">).Content</span><br></pre></td></tr></table></figure><p>如果执行上面命令报错</p><ol><li>可能是win10脚本执行策略问题，修改可以执行下边命令：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy -Scope CurrentUser</span><br></pre></td></tr></table></figure><p>执行后会出ExecutionPolicy:提示信息，输入RemoteSigned，回车确定后在按Y确定执行。</p><p>再执行安装命令即可正常使用</p><ol><li>网络问题：</li></ol><p>需要科学上网</p><p><img src="https://z4a.net/images/2023/03/14/6469bc10396aaa456abe082a57d9bf55.png" alt="img"></p><p>安装成功↑</p><h4 id="管理jdk版本">管理jdk版本</h4><ol><li>添加本地jdk</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jabba link system@1.8 E:\Users\19318\.jdks\corretto-1.8.0_322-1</span><br></pre></td></tr></table></figure><p><img src="https://z4a.net/images/2023/03/14/b8aeccb86baff856913af5345d84af2b.png" alt="img"></p><p>2.查询本地安装的JDK版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jabba ls</span><br></pre></td></tr></table></figure><p>3.切换jdk版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jabba use system@1.8</span><br></pre></td></tr></table></figure><p><img src="https://z4a.net/images/2023/03/14/d65994093e63d5b9198474374da20763.png" alt="img"></p><p>附：常用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jabba ls-remote 查询服务器上可下载的安装的JDK版本</span><br><span class="line">jabba ls 查询本地安装的JDK版本</span><br><span class="line">jabba install openjdk@1.10-0 安装OpenJDK</span><br><span class="line">jabba uninstall zulu@1.6.77 卸载JDK</span><br><span class="line">jabba use adopt@1.8 切换使用的JDK版本</span><br></pre></td></tr></table></figure><h4 id="应用场景和局限性">应用场景和局限性</h4><p>我的需求是将默认版本由17变为8，在尝试了网上的其他办法没有成功后尝试的jabba，但是jabba仅可在管理员身份下的powershell中可以被找到并使用，在普通powershell、普通cmd和管理员cmd中均无法找到或使用jabba，并且默认的jdk版本仍是原来的17，具体原因未知。</p><p>参考文章：<a href="https://www.cnblogs.com/fortuneju/p/14661923.html">Java使用Jabba进行版本管理</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Windows下的Java版本管理–jabba&lt;/h1&gt;
&lt;p&gt;jabba相关信息：&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/shyiko/jabba&quot;&gt;https://github.com/shyiko/jabba&lt;/a&gt;&lt;/p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>VUE的安装</title>
    <link href="http://example.com/2023/07/26/Vue%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <id>http://example.com/2023/07/26/Vue%E7%9A%84%E5%AE%89%E8%A3%85/</id>
    <published>2023-07-26T12:49:24.453Z</published>
    <updated>2023-07-26T12:54:03.725Z</updated>
    
    <content type="html"><![CDATA[<p>我的版本如下所示</p><p><img src="https://z4a.net/images/2023/03/14/aee4a80c084263211052d9bbcd7d660f.png" alt="img"></p><p>这是以前我的电脑就配置好的，具体怎么装俺也想不起来了，可以上网搜搜其他教程，注意配置环境变量和用户变量噢~</p><h3 id="开始安装">开始安装</h3><p>先贴出来我滴参考文章吧！</p><p>《<a href="https://blog.csdn.net/thumbs_up_sign_ygj/article/details/104979272">用webstorm搭建vue项目（亲测，绝对实用）</a>》</p><p>大哥写的不错，也包含了安装nodejs和npm的过程，大家可以借鉴一下。下面是我的安装过程</p><ul><li>安装淘宝镜像-cnpm</li></ul><p>这类似与npm的国内镜像源，用它下载会变快一点点~</p><p>安装命令：npm install -g cnpm --registry=<a href="https://registry.npm.taobao.org">https://registry.npm.taobao.org</a></p><p>验证命令：cnpm -v</p><p>返回如下内容则安装成功</p><p><img src="https://z4a.net/images/2023/03/14/e7c53873a0e02012d761a852d05cd32f.png" alt="img"></p><p>如果你一下就成功了，那我恭喜你。我本人输入验证命令时遇到了报错</p><p>‘cnpm‘ 不是内部或外部命令，也不是可运行的程序 或批处理文件。</p><p>上网找了很久，总结出来报错原因应该是：没有将cnpm的执行路径添加到windows环境变量中</p><p>好，那现在问题就变成了cnpm在哪里执行捏？</p><p>首先，cnpm一般会下载在你安装的nodejs的文件夹下。按照网上的说法，有一些人的cnpm.cmd会在这个↓文件夹下，不知道大家的在不在，反正我是没有</p><p>（注意是cnpm.cmd不是普通的cnpm噢）</p><p><img src="https://z4a.net/images/2023/03/14/35d81428dc25d5929904e26cae7023b6.png" alt="img"></p><p>找了半天我也不知道网上博主们的cnpm.cmd是哪来的，正发愁的时候突然发现他就在前几层的文件夹（node_global）下诶</p><p><img src="https://z4a.net/images/2023/03/14/f21d3db0ca340eae6a971a0d1fc96d76.png" alt="img"></p><p>那现在问题就很简单啦，由于原因是：没有将cnpm的执行路径添加到windows环境变量中，现在我们只需要在用户变量的Path中添加cnpm.cmd所在的路径即可！</p><p><img src="https://z4a.net/images/2023/03/14/64a6f743dd4b6e3d561a5eb8fc398b30.png" alt="img"></p><p>现在，我们再去用验证命令来验证，就会得到正确的结果啦</p><ul><li>安装webpack</li></ul><p>安装命令：cnpm install webpack -g</p><p>验证命令：webpack -v</p><p>如果出现</p><blockquote><p>We will use “npm” to install the CLI via “npm install -D”. Do you want to install ‘webpack-cli’ (yes/no):</p></blockquote><p>直接回车（即默认no，选择yes会报错），然后执行</p><p>npm install webpack-cli -g</p><ul><li>安装Vue</li></ul><p>安装命令：cnpm install vue -g</p><ul><li>安装Vue命令行工具，即vue-cli 脚手架</li></ul><p>安装命令：cnpm install vue-cli -g</p><p>验证命令：vue -V (V要大写！)</p><p><img src="https://z4a.net/images/2023/03/14/4011de0ebd511babbff9d217c6ed65e7.png" alt="img"></p><p>这样我的vue就安装好啦，但是做到这里安装的vue-cli应该是2.9.6版本噢，我后续又进行了更新，下文会写！</p><h3 id="Vue-Cli更新">Vue-Cli更新</h3><p>参考的文章是</p><p>《<a href="https://blog.csdn.net/qq_48736958/article/details/111405591">如何升级Vue的版本 vue2.9.6升级到vue3.0</a>》</p><ul><li>首先卸载老版本vue2.9.6</li></ul><p>执行命令：npm uninstall vue-cli -g</p><ul><li>再安装新的vue</li></ul><p>执行命令：cnpm install -g @vue/cli</p><p>完成！现在再输入vue -V就可以检测到新版本的vue了</p><h3 id="WebStorm创建Vue项目">WebStorm创建Vue项目</h3><p>在新建项目是选择Vue.js即可，系统会自动去寻找电脑中的Node解释器和Vue CLI</p><p><img src="https://z4a.net/images/2023/03/14/069826b004091b7a84f1244f2378f1ec.png" alt="img"></p><p>点击创建，就可以开始创建新项目了。这时我的电脑又报错了。。。</p><blockquote><p>npm ERR! code EPERM<br>npm ERR! syscall mkdir<br>…</p></blockquote><p>具体啥意思捏？咱也不知道。反正就先把报错信息甩给bing让他搜去吧。</p><p>bing告诉我：《<a href="https://blog.csdn.net/qq_42780155/article/details/119025638">npm安装报错（npm ERR! code EPERM npm ERR! syscall mkdir…）</a>》</p><p>文中提到两种方法，抱着能输命令就不找文件的原则，我先试了第二种</p><p>npm cache clean --force</p><p>失败了哈哈哈，提示我不能删除之类的（即使我已经以管理员身份运行）</p><p>然后回过头看第一种，这次倒是根据文章很顺利的找到了.npmrc文件（C:\Users{账户}\下的.npmrc文件），直接delete，再次运行，问题解决（已经删完了没法给大家截图了，莫得办法）</p><p>经过一段时间的等待，WebStorm终于创建好了Vue项目，项目结构如下</p><p><img src="https://z4a.net/images/2023/03/14/f7d0a6dada1a17807ae32ed38c37f3d5.png" alt="img"></p><p>这时候有人就要问了：“你怎么知道你安装的vue版本呢？” 检测vue版本可以在我们的webstorm的终端中输入npm list vue来查看（不在项目下输入可能会报错）</p><p><img src="https://z4a.net/images/2023/03/14/b06fb53bb0ec8b473244f9b1cbef0bcb.png" alt="img"></p><p>也可以在package.json文件中的&quot;dependencies&quot;下查看</p><p><img src="https://z4a.net/images/2023/03/14/b0e7abc115cf309e5d33a36a0ccd0da3.png" alt="img"></p><p>后面再更新Vue的教程~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我的版本如下所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://z4a.net/images/2023/03/14/aee4a80c084263211052d9bbcd7d660f.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;这是以前我的电脑就配置好的，具体怎么装俺也</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Springboot集成Redis做数据库缓存（原生版）</title>
    <link href="http://example.com/2023/07/26/Springboot%E9%9B%86%E6%88%90Redis%E5%81%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%93%E5%AD%98%EF%BC%88%E5%8E%9F%E7%94%9F%E7%89%88%EF%BC%89/"/>
    <id>http://example.com/2023/07/26/Springboot%E9%9B%86%E6%88%90Redis%E5%81%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%93%E5%AD%98%EF%BC%88%E5%8E%9F%E7%94%9F%E7%89%88%EF%BC%89/</id>
    <published>2023-07-26T12:49:24.450Z</published>
    <updated>2023-07-26T12:53:38.287Z</updated>
    
    <content type="html"><![CDATA[<h1>Springboot集成Redis做数据库缓存（原生版）</h1><p>redis做缓存简单来说就是：系统把表中经常访问的记录放在了Redis中，然后用户查询时先去查询Redis再去查询MySQL，由于缓存在内存中，所以查询会很快，起到提高性能的作用。</p><p>先来看效果吧~</p><p>测试案例是把一个查询重复99999次，根据时间来判断性能的好坏。</p><p>使用redis时：</p><p><img src="https://z4a.net/images/2023/03/14/defac8a67b0d3fa9b16422502e00af87.png" alt="img"></p><p>不使用redis时：</p><p><img src="https://z4a.net/images/2023/03/14/9b779c3fa0fbbdf4d57cfaf678d6233d.png" alt="img"></p><p>可以看出使用redis大概快了两秒钟，确实实现了优化。但是redis可以实现的优化效果作者并不是很了解，这里感觉效果不算特别明显，可能和代码有关系。</p><p>本文所用的方法是原生的redis操作，没有用到springboot自带的缓存机制（不会，下次再更）。本文代码基于<a href="http://www.alwaysxr777.top:8081/blog/21">之前的文章</a>进行添加，需要源码的同学可以去原文下载。</p><h3 id="maven配置">maven配置</h3><p>添加以下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="application配置">application配置</h3><p>redis默认是没有密码的，所以如果你没有设置密码就不需要写密码啦</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string">redis:host: localhost</span></span><br><span class="line">    <span class="attr">port</span>:<span class="string">6379</span></span><br></pre></td></tr></table></figure><h3 id="Java代码">Java代码</h3><p><img src="https://z4a.net/images/2023/03/14/3ee69ecf2e34a778f4157fcd83c4018f.png" alt="img"></p><ul><li>首先在项目文件夹下新建config文件夹（放配置类）和util文件夹（放工具类）</li><li>在config文件夹下新建RedisConfig类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate <span class="title function_">redisTemplateInit</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//序列化key的实例化对象</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="comment">//序列化value的实例化对象</span></span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>());</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RedisTemplate是<strong>Spring Data Redis提供给用户的最高级的抽象客户端</strong>，用户可直接通过RedisTemplate进行多种操作,例如set、get</p><ul><li>（非必须）可以在config文件夹下新建一个RedisConstant类来存储redis的key</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConstant</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String USER_KEY=<span class="string">&quot;User&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到时候使用时直接调用参数即可</p><ul><li>在util文件夹下新建RedisUtil类，里面的内容是封装好的redis操作，网上有很多大佬写的工具类，通用性比较高，找到合适的可以直接拿来用</li></ul><p>我找到的工具类有很多功能，代码比较长，放在文章的最后</p><ul><li>在serverimpl中添加redis的相关代码</li></ul><p>主要逻辑是查询前先在redis中寻找有没有要查找的内容，如果没有再去数据库中查找，数据库返回的值顺便存入redis，这样下次再访问时就可以从redis中读到数据了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisUtil redisUtil;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    publicList&lt;User&gt; <span class="title function_">queryAll</span><span class="params">()</span>&#123;<span class="comment">//试图从redis获取</span></span><br><span class="line">        List&lt;User&gt; users =(List&lt;User&gt;) redisUtil.get(RedisConstant.USER_KEY);<span class="comment">//获取失败则去数据库查找</span></span><br><span class="line">        <span class="keyword">if</span>(CollectionUtils.isEmpty(users))&#123;</span><br><span class="line">            users=userMapper.queryAll();<span class="comment">//返回的数据存入redis</span></span><br><span class="line">            redisUtil.set(RedisConstant.USER_KEY,users);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changePassword</span><span class="params">(String username,String password)</span>&#123;<span class="comment">//为了防止数据不一致，在数据库数据改变时先清楚之前redis的相关缓存</span></span><br><span class="line">        redisUtil.del(RedisConstant.USER_KEY);</span><br><span class="line">        userMapper.changePassword(username,password);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码部分就到此结束了~</p><h3 id="运行代码">运行代码</h3><p>首先你的电脑要先启动redis服务器端才可以。</p><p>redis官方是没有Windows版的，不过已经有大佬开发出了Windows版，安装起来比较简单，没什么需要注意的。大家跟着<a href="https://www.runoob.com/redis/redis-install.html">菜鸟教程</a>先在自己电脑上安装redis吧！</p><p>安装好了，有的同学就要问了，redis现在只能在它自己的目录下运行，这可怎么办捏？</p><p>很简单，我们把redis的路径添加到环境变量中，就可以在任意位置启动redis了</p><p><img src="https://z4a.net/images/2023/03/14/4f4763156c35499d7f339ab7ee356a7c.png" alt="img"></p><p>耗，现在我们打开cmd，输入redis-server，就可以启动redis服务端了（默认的端口6379）</p><p><img src="https://z4a.net/images/2023/03/14/0fff79d0f661c8e77aacce09b1110bb1.png" alt="img"></p><p><strong>不要关闭服务端界面</strong>，再打开一个cmd，输入redis-cli，就可以启动客户端了（默认的端口6379）</p><p><img src="https://z4a.net/images/2023/03/14/c519f3754700ed0cda462ce1ce11a980.png" alt="img"></p><p>现在，来运行我们写好的程序吧</p><p>进入localhost:8084，点击获取，我们会从数据库查到数据，同时把数据存入redis，这时我们在redis客户端就可以查到数据了~</p><p><img src="https://z4a.net/images/2023/03/14/b3c1f4887e4e5548716e4950442dad5f.png" alt="img"></p><p>如果你想不起来你的键叫什么，又不想去看代码，那么查询现在redis中存有的键：keys *</p><p><img src="https://z4a.net/images/2023/03/14/bdc34c4083bc81135b89151994b6d645.png" alt="img"></p><p>现在你可以自己写一个测试用例来看看效果如何了。</p><p>虽然在大项目中redis肯定不是这么用的，但是对于作者来说，起码算是用起来了，后面再学习正确的简洁的使用方式，学会了来给大噶更新！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Springboot集成Redis做数据库缓存（原生版）&lt;/h1&gt;
&lt;p&gt;redis做缓存简单来说就是：系统把表中经常访问的记录放在了Redis中，然后用户查询时先去查询Redis再去查询MySQL，由于缓存在内存中，所以查询会很快，起到提高性能的作用。&lt;/p&gt;
&lt;p&gt;先</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Springboot+ajax+mybatis实现简易网页</title>
    <link href="http://example.com/2023/07/26/Springboot+ajax+mybatis%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%BD%91%E9%A1%B5/"/>
    <id>http://example.com/2023/07/26/Springboot+ajax+mybatis%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%BD%91%E9%A1%B5/</id>
    <published>2023-07-26T12:49:24.447Z</published>
    <updated>2023-07-26T12:53:39.537Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Springboot-ajax-mybatis实现简易网页">Springboot+ajax+mybatis实现简易网页</h2><p>趁着周末又浅浅复习了一下结对编程用到的技术，重新制作了一个简单的demo练手，分享一下自己的理解~</p><h4 id="Springboot框架">Springboot框架</h4><p>上学期，我在接触springboot框架之前没有接触过spring框架和Javaweb等知识，所以刚刚上手的时候还是非常的困惑不理解的。经过了一个学期断断续续的学习，加上假期（<s>四舍五入也算</s>）自己完成的博客，对springboot的结构和编写时的流程有了一些自己的理解：</p><p><img src="https://z4a.net/images/2023/03/14/c6e477be9cbc47a076f7de22d640d3b0.png" alt="img"></p><p><img src="https://z4a.net/images/2023/03/14/841d8a6247607c78db9b8257c502b70a.png" alt="img"></p><ol><li>pojo层（entity层）：用于定义数据库对象对应的属性，是存放实体类的文件夹，例如：user类等。可以使用lombok来自动生成构造方法和getter setter</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>mapper层（dao层）：是持久层，用于与数据库进行数据交互，mybatis就是一种应用广泛的持久层框架。在mapper层中，先设计接口，然后通过配置文件或者注解来实现crud操作。由于玩不明白配置文件，所以俺就选择了使用@Select注解（菜）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.mybatis1008.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">queryAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;update user set password = #&#123;password&#125; where username = #&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">changePassword</span><span class="params">(String username, String password)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>service层：是业务逻辑层，完成功能的设计。也是先设计接口，再创建要实现的类。在service层中，我们可以调用mapper层中的接口来进行业务逻辑应用的处理。service的impl是对service接口进行实现，把mapper和service进行整合的文件。封装Service层的业务逻辑有利于业务逻辑的独立性和重复利用性。</li></ol><p><img src="https://z4a.net/images/2023/03/14/121958b91a3c56a172df3f0d3130e044.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UserService</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">queryAll</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changePassword</span><span class="params">(String username,String password)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//UserServiceImpl</span></span><br><span class="line"><span class="keyword">import</span> com.example.mybatis1008.mapper.UserMapper;                         </span><br><span class="line"><span class="keyword">import</span> com.example.mybatis1008.pojo.User;                                 </span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;            </span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;                            </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;                                                    </span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>                                                                  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;                      </span><br><span class="line">    <span class="meta">@Autowired</span>                                                              </span><br><span class="line">    UserMapper userMapper;                                                  </span><br><span class="line">    <span class="meta">@Override</span>                                                               </span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">queryAll</span><span class="params">()</span>&#123;                                           </span><br><span class="line">        <span class="keyword">return</span> userMapper.queryAll();                                         </span><br><span class="line">    &#125;                                                                       </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>                                                               </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changePassword</span><span class="params">(String username,String password)</span> &#123;           </span><br><span class="line">        userMapper.changePassword(username,password);                         </span><br><span class="line">        System.out.println(<span class="string">&quot;修改成功&quot;</span>);                                           </span><br><span class="line">    &#125;                                                                       </span><br><span class="line">&#125;                                </span><br></pre></td></tr></table></figure><ol><li>controller层：是控制层，调用service层中实现的功能来实现业务，控制请求和响应，进行前后端交互</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.mybatis1008.service.UserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span> UserServiceImpl userService;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;get&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">(HttpServletResponse response, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(userService.queryAll());</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.getWriter().write(String.valueOf(userService.queryAll()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;changePassword&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changePassword</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(username+<span class="string">&quot; &quot;</span>+password);</span><br><span class="line">        userService.changePassword(username,password);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.getWriter().write(String.valueOf(userService.queryAll()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>借用一张网图来清晰明了的总结一下结构~</p><p><img src="https://z4a.net/images/2023/03/14/71757023b7fe4e9a522dc95aa5064b55.png" alt="img"></p><h4 id="mybatis">mybatis</h4><p>mybatis使用之前需要对项目进行一些配置，首先就是在maven中引入mybatis（具体maven文件在最后给出~），然后还需要在resources文件夹下新建一个mybatis-config.xml文件，其中的具体内容在<a href="https://mybatis.net.cn/">mybatis的官网</a>上可以找到，这里也给大家列出</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/exam?useSSL=false<span class="symbol">&amp;amp;</span>allowPublicKeyRetrieval=true<span class="symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1234&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        这里是引入mapper的配置文件，由于我直接用了select接口，所以这个就没有用上--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;mapper resource=&quot;/mapper/UserMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样我的mybatis就可以使用了（希望你滴也可以，这东西挺玄学的，第一次配的时候搞了半天），我采用的是直接在持久层使用@Select注解来写sql语句（见mapper层），自我感觉也挺方便清晰的，不过主流方案好像是在对应的配置文件中写，可能维护的时候更方便吧。</p><p>在使用时，直接创建mapper对象进行方法调用，即可实现其所对应的sql语句。</p><h4 id="ajax">ajax</h4><p>我更习惯用jQuery封装好的ajax，写法更简洁一点，原生的ajax区别也不算大。详见<a href="http://www.alwaysxr777.top:8081/blog/18">jQuery的ajax的简单应用</a></p><h4 id="简单展示">简单展示</h4><ul><li>初始状态</li></ul><p><img src="https://z4a.net/images/2023/03/14/aedca43104932554374c0d88d0fed36e.png" alt="img"></p><ul><li>点击获取，获取现有的用户信息</li></ul><p><img src="https://z4a.net/images/2023/03/14/3db587ae082bb6838d2a4e014e25ddba.png" alt="img"></p><ul><li>填写用户名和密码，点击修改，修改信息</li></ul><p><img src="https://z4a.net/images/2023/03/14/4f0be6dde65eed27568d9929d1614394.png" alt="img"></p><p>界面没有做什么美化，项目结构也很简单，但麻雀虽小五脏俱全，使用这些技术就可以实现一个小小的web项目了。(<a href="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-7a58b0fa-a78d-4c4c-985f-fb09e45e3449/2364dabe-47ce-4e0f-aca1-7ab34cf0b4db.rar">本文源码下载</a>)</p><p>由于缺少研究，作者目前只是简单知道一些注解的作用，对于xml文件的编写并不是很熟悉，很多地方暂时也不是很清楚。但是作者认为，不理解的时候也不需深究，熟练的使用对理解原理有着重要作用。当能做到熟练使用时，也许我们对自己未知的知识会产生一些新的理解。</p><p>希望本文能帮助大家对web项目的开发有一些新的认识！</p><p>最后附上maven配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Mybatis1008<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Mybatis1008<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Mybatis1008<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xmlunit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xmlunit-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.activation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Springboot-ajax-mybatis实现简易网页-2">Springboot+ajax+mybatis实现简易网页</h2><p>趁着周末又浅浅复习了一下结对编程用到的技术，重新制作了一个简单的demo练手，分享一下自己的理解~</p><h4 id="Springboot框架-2">Springboot框架</h4><p>上学期，我在接触springboot框架之前没有接触过spring框架和Javaweb等知识，所以刚刚上手的时候还是非常的困惑不理解的。经过了一个学期断断续续的学习，加上假期（<s>四舍五入也算</s>）自己完成的博客，对springboot的结构和编写时的流程有了一些自己的理解：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c6e477be9cbc47a076f7de22d640d3b0.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/841d8a6247607c78db9b8257c502b70a.png" alt="img"></p><ol><li>pojo层（entity层）：用于定义数据库对象对应的属性，是存放实体类的文件夹，例如：user类等。可以使用lombok来自动生成构造方法和getter setter</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>mapper层（dao层）：是持久层，用于与数据库进行数据交互，mybatis就是一种应用广泛的持久层框架。在mapper层中，先设计接口，然后通过配置文件或者注解来实现crud操作。由于玩不明白配置文件，所以俺就选择了使用@Select注解（菜）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.mybatis1008.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">queryAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;update user set password = #&#123;password&#125; where username = #&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">changePassword</span><span class="params">(String username, String password)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>service层：是业务逻辑层，完成功能的设计。也是先设计接口，再创建要实现的类。在service层中，我们可以调用mapper层中的接口来进行业务逻辑应用的处理。service的impl是对service接口进行实现，把mapper和service进行整合的文件。封装Service层的业务逻辑有利于业务逻辑的独立性和重复利用性。</li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/121958b91a3c56a172df3f0d3130e044.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UserService</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">queryAll</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changePassword</span><span class="params">(String username,String password)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//UserServiceImpl</span></span><br><span class="line"><span class="keyword">import</span> com.example.mybatis1008.mapper.UserMapper;                         </span><br><span class="line"><span class="keyword">import</span> com.example.mybatis1008.pojo.User;                                 </span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;            </span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;                            </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;                                                    </span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>                                                                  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;                      </span><br><span class="line">    <span class="meta">@Autowired</span>                                                              </span><br><span class="line">    UserMapper userMapper;                                                  </span><br><span class="line">    <span class="meta">@Override</span>                                                               </span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">queryAll</span><span class="params">()</span>&#123;                                           </span><br><span class="line">        <span class="keyword">return</span> userMapper.queryAll();                                         </span><br><span class="line">    &#125;                                                                       </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>                                                               </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changePassword</span><span class="params">(String username,String password)</span> &#123;           </span><br><span class="line">        userMapper.changePassword(username,password);                         </span><br><span class="line">        System.out.println(<span class="string">&quot;修改成功&quot;</span>);                                           </span><br><span class="line">    &#125;                                                                       </span><br><span class="line">&#125;                                </span><br></pre></td></tr></table></figure><ol><li>controller层：是控制层，调用service层中实现的功能来实现业务，控制请求和响应，进行前后端交互</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.mybatis1008.service.UserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span> UserServiceImpl userService;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;get&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">(HttpServletResponse response, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(userService.queryAll());</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.getWriter().write(String.valueOf(userService.queryAll()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;changePassword&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changePassword</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(username+<span class="string">&quot; &quot;</span>+password);</span><br><span class="line">        userService.changePassword(username,password);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.getWriter().write(String.valueOf(userService.queryAll()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>借用一张网图来清晰明了的总结一下结构~</p><p><img src="https://img-blog.csdnimg.cn/img_convert/71757023b7fe4e9a522dc95aa5064b55.png" alt="img"></p><h4 id="mybatis-2">mybatis</h4><p>mybatis使用之前需要对项目进行一些配置，首先就是在maven中引入mybatis（具体maven文件在最后给出~），然后还需要在resources文件夹下新建一个mybatis-config.xml文件，其中的具体内容在<a href="https://mybatis.net.cn/">mybatis的官网</a>上可以找到，这里也给大家列出</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/exam?useSSL=false<span class="symbol">&amp;amp;</span>allowPublicKeyRetrieval=true<span class="symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1234&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        这里是引入mapper的配置文件，由于我直接用了select接口，所以这个就没有用上--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;mapper resource=&quot;/mapper/UserMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样我的mybatis就可以使用了（希望你滴也可以，这东西挺玄学的，第一次配的时候搞了半天），我采用的是直接在持久层使用@Select注解来写sql语句（见mapper层），自我感觉也挺方便清晰的，不过主流方案好像是在对应的配置文件中写，可能维护的时候更方便吧。</p><p>在使用时，直接创建mapper对象进行方法调用，即可实现其所对应的sql语句。</p><h4 id="ajax-2">ajax</h4><p>我更习惯用jQuery封装好的ajax，写法更简洁一点，原生的ajax区别也不算大。详见<a href="http://www.alwaysxr777.top:8081/blog/18">jQuery的ajax的简单应用</a></p><h4 id="简单展示-2">简单展示</h4><ul><li>初始状态</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/aedca43104932554374c0d88d0fed36e.png" alt="img"></p><ul><li>点击获取，获取现有的用户信息</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/3db587ae082bb6838d2a4e014e25ddba.png" alt="img"></p><ul><li>填写用户名和密码，点击修改，修改信息</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/4f0be6dde65eed27568d9929d1614394.png" alt="img"></p><p>界面没有做什么美化，项目结构也很简单，但麻雀虽小五脏俱全，使用这些技术就可以实现一个小小的web项目了。(<a href="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-7a58b0fa-a78d-4c4c-985f-fb09e45e3449/2364dabe-47ce-4e0f-aca1-7ab34cf0b4db.rar">本文源码下载</a>)</p><p>由于缺少研究，作者目前只是简单知道一些注解的作用，对于xml文件的编写并不是很熟悉，很多地方暂时也不是很清楚。但是作者认为，不理解的时候也不需深究，熟练的使用对理解原理有着重要作用。当能做到熟练使用时，也许我们对自己未知的知识会产生一些新的理解。</p><p>希望本文能帮助大家对web项目的开发有一些新的认识！</p><p>最后附上maven配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Mybatis1008<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Mybatis1008<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Mybatis1008<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xmlunit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xmlunit-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.activation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Springboot-ajax-mybatis实现简易网页&quot;&gt;Springboot+ajax+mybatis实现简易网页&lt;/h2&gt;
&lt;p&gt;趁着周末又浅浅复习了一下结对编程用到的技术，重新制作了一个简单的demo练手，分享一下自己的理解~&lt;/p&gt;
&lt;h4 id=&quot;S</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java的JNI机制</title>
    <link href="http://example.com/2023/07/26/Java%E7%9A%84JNI%E6%9C%BA%E5%88%B6-%E7%AE%80%E5%8D%95%E5%AE%9E%E8%B7%B5/"/>
    <id>http://example.com/2023/07/26/Java%E7%9A%84JNI%E6%9C%BA%E5%88%B6-%E7%AE%80%E5%8D%95%E5%AE%9E%E8%B7%B5/</id>
    <published>2023-07-26T12:49:24.445Z</published>
    <updated>2023-07-26T12:53:41.727Z</updated>
    
    <content type="html"><![CDATA[<h1>Java的JNI机制</h1><p>Java还有一个JNI机制，它的全称：Java Native Interface，即Java本地接口。它允许在Java虚拟机内运行的Java代码与其他编程语言（如C/C++和汇编语言）编写的程序和库进行交互（在Android开发中用得比较多）</p><p>简单举例：我们现在想要让C++语言程序帮助我们的Java程序实现a+b的运算，首先我们需要创建一个本地方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(sum(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//native 是本地方法关键字，无需在Java中实现本方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建好后，接着点击构建按钮，会出现一个out文件夹，也就是生成的class文件在其中</p><p><img src="https://z4a.net/images/2023/03/14/43ed13117656230631a7c507ff49a620.png" alt="img"></p><p>接着我们直接生成对应的C头文件：</p><p>(注意，这条指令基于jdk1.8实现，jdk版本过高 请使用javac -h指令)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javah -classpath out/production/pro02 -d ./jni com.test.Main</span><br></pre></td></tr></table></figure><p>生成的头文件位于jni文件夹下：</p><p><img src="https://z4a.net/images/2023/03/14/340c5a8e47a7637beef307265b08d873.png" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="comment">/* Header for class com_test_Main */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _Included_com_test_Main</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _Included_com_test_Main</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     com_test_Main</span></span><br><span class="line"><span class="comment"> * Method:    sum</span></span><br><span class="line"><span class="comment"> * Signature: (II)V</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT <span class="type">void</span> JNICALL Java_com_test_Main_sum</span><br><span class="line">    <span class="comment">//这里的两个jint就是传入的a，b两个参数</span></span><br><span class="line">  (JNIEnv *, jclass, jint, jint);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>接着我们在CLion中新建一个C++项目，引入刚刚生成的头文件并导入jni相关头文件（在JDK文件夹中）</p><p>首先修改CMake文件：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cmake_minimum_required</span>(VERSION <span class="number">3.20</span>)</span><br><span class="line"><span class="built_in">project</span>(pro02)</span><br><span class="line"></span><br><span class="line">#和使用的jdk的路径有关</span><br><span class="line"><span class="built_in">include_directories</span>(E:/Users/<span class="number">19318</span>/.jdks/corretto<span class="number">-1.8</span><span class="number">.0</span>_322<span class="number">-1</span>/include)</span><br><span class="line"><span class="built_in">include_directories</span>(E:/Users/<span class="number">19318</span>/.jdks/corretto<span class="number">-1.8</span><span class="number">.0</span>_322<span class="number">-1</span>/include/win32)</span><br><span class="line"><span class="built_in">include_directories</span>(E:/Users/<span class="number">19318</span>/.jdks/corretto<span class="number">-1.8</span><span class="number">.0</span>_322<span class="number">-1</span>/include/win32/bridge)</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_STANDARD <span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">#add_executable：生成一个可执行文件 不添加则无法再clion中运行</span><br><span class="line"><span class="built_in">add_executable</span>(pro02 com_test_Main.cpp com_test_Main.h)</span><br><span class="line">#add_library：生成一个库</span><br><span class="line"><span class="meta">#sum:是生成共享库的名字，前面会自动加上lib前缀，如这里windows生成的是 libsum.dll</span></span><br><span class="line">#SHARED:库的类型为动态，windows上生成.dll，而STATIC 则是生成静态库，windows生成.a文件</span><br><span class="line"><span class="built_in">add_library</span>(sum SHARED com_test_Main.cpp)</span><br></pre></td></tr></table></figure><p>再将jni下的头文件复制到c++项目下：</p><p><img src="https://z4a.net/images/2023/03/14/0b65712bc7c6bd242eb9cfa0293f9635.png" alt="img"></p><p>认识一下引用类型对照表：</p><p><img src="https://z4a.net/images/2023/03/14/b57c72f5b7a82db474211a2cb426425d.jpg" alt="img"></p><p>接下来可以开始编写程序了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;com_test_Main.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_test_Main_sum</span></span></span><br><span class="line"><span class="function">  <span class="params">(JNIEnv *, jclass, jint a, jint b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着我们就可以将cpp编译为动态链接库,在Windows下应该生成.dll文件</p><p>直接运行项目，我们可以在cmake-build-debug文件夹下找到生成的dll文件</p><p><img src="https://z4a.net/images/2023/03/14/e8185e2ef87803b2610937be79c4aa3d.png" alt="img"></p><p>注意这里运行时会报错undefined reference to ‘WinMain’，因为我们的项目没有main函数，但报错并不影响dll文件的生成和使用。</p><p>将生成的dll文件加载到Java程序中，运行即可得到结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//输入dll文件的路径</span></span><br><span class="line">        System.load(<span class="string">&quot;D:\\C++\\pro02\\cmake-build-debug\\libsum.dll&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(sum(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Java的JNI机制&lt;/h1&gt;
&lt;p&gt;Java还有一个JNI机制，它的全称：Java Native Interface，即Java本地接口。它允许在Java虚拟机内运行的Java代码与其他编程语言（如C/C++和汇编语言）编写的程序和库进行交互（在Android开发中用得</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java - PriorityQueue 优先队列</title>
    <link href="http://example.com/2023/07/26/Java%20-%20PriorityQueue%20%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    <id>http://example.com/2023/07/26/Java%20-%20PriorityQueue%20%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/</id>
    <published>2023-07-26T12:49:24.442Z</published>
    <updated>2023-07-26T12:53:42.861Z</updated>
    
    <content type="html"><![CDATA[<h1>Java - PriorityQueue 优先队列</h1><p>最近遇到一道算法题，说难其实也不难，但是用之前的思路和知识总感觉很麻烦很耗时。在看高手解析时发现了一种新思路，即使用PriorityQueue来取最大值和最小值。在此记录。</p><h3 id="题目描述">题目描述</h3><p><a href="https://www.nowcoder.com/practice/9be0172896bd43948f8a32fb954e1be1">题目链接-牛客网</a></p><blockquote><p>数据流中的中位数<br>描述<br>如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。我们使用Insert()方法读取数据流，使用GetMedian()方法获取当前读取数据的中位数。<br>示例1<br>输入：<br>[5,2,3,4,1,6,7,0,8]<br>返回值：<br>&quot;5.00 3.50 3.00 3.50 3.00 3.50 4.00 3.50 4.00 &quot;<br>说明：<br>数据流里面不断吐出的是5,2,3…,则得到的平均数分别为5,(5+2)/2,3…<br>示例2<br>输入：<br>[1,1,1]<br>返回值：<br>&quot;1.00 1.00 1.00 &quot;</p></blockquote><h3 id="解题思路">解题思路</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 大顶堆，存储左半边元素 */</span></span><br><span class="line"><span class="keyword">private</span> PriorityQueue&lt;Integer&gt; left =<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((o1, o2)-&gt; o2 - o1);</span><br><span class="line"><span class="comment">/* 小顶堆，存储右半边元素，并且右半边元素都大于左半边 */</span></span><br><span class="line"><span class="keyword">private</span> PriorityQueue&lt;Integer&gt; right =<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line"><span class="comment">/* 当前数据流读入的元素个数 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> N=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Insert</span><span class="params">(Integer val)</span>&#123;</span><br><span class="line"><span class="comment">/* 插入要保证两个堆存于平衡状态 */</span></span><br><span class="line"><span class="keyword">if</span>(N%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">/* N 为偶数的情况下插入到右半边。</span></span><br><span class="line"><span class="comment">         * 因为右半边元素都要大于左半边，但是新插入的元素不一定比左半边元素来的大，</span></span><br><span class="line"><span class="comment">         * 因此需要先将元素插入左半边，然后利用左半边为大顶堆的特点，取出堆顶元素即为最大元素，此时插入右半边 */</span></span><br><span class="line">        left.add(val);</span><br><span class="line">        right.add(left.poll());</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        right.add(val);</span><br><span class="line">        left.add(right.poll());</span><br><span class="line">    &#125;</span><br><span class="line">    N++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Double <span class="title function_">GetMedian</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( N % <span class="number">2</span> == <span class="number">0</span> ) <span class="keyword">return</span>(left.peek()+ right.peek())/<span class="number">2.0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span>(<span class="type">double</span>) right.peek();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PriorityQueue介绍">PriorityQueue介绍</h3><p>PriorityQueue（优先队列）是一种特殊的队列，它可以保证每次取出的堆顶元素都是最小值（或者最大值）。其通过堆实现，具体说是通过完全二叉树（<em><strong>complete binary tree</strong></em>）实现的<strong>小顶堆</strong>（任意一个非叶子节点的权值，都不大于其左右子节点的权值），也就意味着可以通过数组来作为<em><strong>PriorityQueue</strong></em>的底层实现。</p><p>特点：</p><ul><li>PriorityQueue是一个无限制的队列，并且动态增长。</li><li>它不允许null对象。</li><li>添加到PriorityQueue的对象必须具有可比性。</li><li>*<strong>默认情况下，优先级队列的对象按自然顺序排序</strong>。</li><li>比较器可用于队列中对象的自定义排序。</li><li>优先级队列的<strong>头部</strong>是基于自然排序或基于比较器的排序的<strong>最小</strong>元素。当我们轮询队列时，它从队列中返回头对象。</li><li>如果存在多个具有相同优先级的对象，则它可以随机轮询其中任何一个。</li><li>PriorityQueue <strong>不是线程安全的</strong>。PriorityBlockingQueue在并发环境中使用。</li><li>它为add和poll方法提供了**O（log（n））**时间。</li></ul><p>方法：</p><ul><li>add()和offer()</li></ul><p>add(E e)和offer(E e)的语义相同，都是向优先队列中插入元素，只是Queue接口规定二者对插入失败时的处理不同，前者在插入失败时抛出异常，后则则会返回false。对于<em><strong>PriorityQueue</strong></em>这两个方法其实没什么差别。</p><p><img src="https://z4a.net/images/2023/03/14/f9f1112c0acdfc9303cde1ec8bde0b2e.png" alt="img"></p><ul><li>element()和peek()</li></ul><p>element()和peek()的语义完全相同，都是获取但不删除队首元素，也就是队列中权值最小的那个元素，二者唯一的区别是当方法失败时前者抛出异常，后者返回null。根据小顶堆的性质，堆顶那个元素就是全局最小的那个；由于堆用数组表示，根据下标关系，0下标处的那个元素既是堆顶元素。所以<strong>直接返回数组0下标处的那个元素即可</strong>。</p><p><img src="https://z4a.net/images/2023/03/14/ecf024eba0451c20ce64c7a7f2f09357.png" alt="img"></p><ul><li>remove()和poll()</li></ul><p>remove()和poll()方法的语义也完全相同，都是获取并删除队首元素，区别是当方法失败时前者抛出异常，后者返回null。由于删除操作会改变队列的结构，为维护小顶堆的性质，需要进行必要的调整。</p><p><img src="https://z4a.net/images/2023/03/14/3644ba34fb6fc6a54b78649da2890093.png" alt="img"></p><ul><li>remove(Object object)</li></ul><p>remove(Object o)方法用于删除队列中跟o相等的某一个元素（如果有多个相等，只删除一个），该方法不是Queue接口内的方法，而是Collection接口的方法。由于删除操作会改变队列结构，所以要进行调整；又由于删除元素的位置可能是任意的，所以调整过程比其它函数稍加繁琐。具体来说，remove(Object o)可以分为2种情况：1. 删除的是最后一个元素。直接删除即可，不需要调整。2. 删除的不是最后一个元素，从删除点开始以最后一个元素为参照调用一次siftDown()即可。此处不再赘述。</p><p><img src="https://z4a.net/images/2023/03/14/bea558a3265744ad5734982c93eab969.png" alt="img"></p><p><a href="https://github.com/CarpenterLee/JCFInternals/blob/master/markdown/8-PriorityQueue.md">代码实现</a></p><p>参考文献：</p><p>[41.1 数据流中的中位数 | CS-Notes (cyc2018.xyz)](<a href="http://www.cyc2018.xyz/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87">http://www.cyc2018.xyz/算法/剑指</a> Offer 题解/41.1 数据流中的中位数.html)</p><p><a href="https://github.com/CarpenterLee/JCFInternals/blob/master/markdown/8-PriorityQueue.md">JCFInternals/8-PriorityQueue.md at master · CarpenterLee/JCFInternals (github.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Java - PriorityQueue 优先队列&lt;/h1&gt;
&lt;p&gt;最近遇到一道算法题，说难其实也不难，但是用之前的思路和知识总感觉很麻烦很耗时。在看高手解析时发现了一种新思路，即使用PriorityQueue来取最大值和最小值。在此记录。&lt;/p&gt;
&lt;h3 id=&quot;题目描</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>软件工程导论-个人项目</title>
    <link href="http://example.com/2023/07/26/%E4%B8%AD%E5%B0%8F%E5%AD%A6%E6%95%B0%E5%AD%A6%E5%8D%B7%E5%AD%90%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%A8%8B%E5%BA%8F/"/>
    <id>http://example.com/2023/07/26/%E4%B8%AD%E5%B0%8F%E5%AD%A6%E6%95%B0%E5%AD%A6%E5%8D%B7%E5%AD%90%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%A8%8B%E5%BA%8F/</id>
    <published>2023-07-26T12:49:24.434Z</published>
    <updated>2023-07-26T12:52:05.683Z</updated>
    
    <content type="html"><![CDATA[<p><strong>软件工程导论-个人项目</strong></p><h3 id="题目要求">题目要求</h3><p>用户：</p><p>小学、初中和高中数学老师。</p><p>功能：</p><p>1、命令行输入用户名和密码，两者之间用空格隔开（程序预设小学、初中和高中各三个账号，具体见附表），如果用户名和密码都正确，将根据账户类型显示“当前选择为XX出题”，XX为小学、初中和高中三个选项中的一个。否则提示“请输入正确的用户名、密码”，重新输入用户名、密码； while循环</p><p>2、登录后，系统提示“准备生成XX数学题目，请输入生成题目数量（输入-1将退出当前用户，重新登录）：”，XX为小学、初中和高中三个选项中的一个，用户输入所需出的卷子的题目数量，系统默认将根据账号类型进行出题。每道题目的操作数在1-5个之间，操作数取值范围为1-100；</p><p>3、题目数量的有效输入范围是“10-30”（含10,30，或-1退出登录），程序根据输入的题目数量生成符合小学、初中和高中难度的题目的卷子（具体要求见附表）。同一个老师的卷子中的题目不能与以前的已生成的卷子中的题目重复（以指定文件夹下存在的文件为准，见5）；</p><p>4、在登录状态下，如果用户需要切换类型选项，命令行输入“切换为XX”，XX为小学、初中和高中三个选项中的一个，输入项不符合要求时，程序控制台提示“请输入小学、初中和高中三个选项中的一个”；输入正确后，显示“”系统提示“准备生成XX数学题目，请输入生成题目数量”，用户输入所需出的卷子的题目数量，系统新设置的类型进行出题；</p><p>5、生成的题目将以“年-月-日-时-分-秒.txt”的形式保存，每个账号一个文件夹。每道题目有题号，每题之间空一行；</p><p>6、个人项目9月11日晚上10点以前提交至创新课程管理系统。提交方式：工程文件打包，压缩包名为“几班+姓名.rar”。迟交2天及以内者扣分，每天扣20%。迟交2天及以上者0分。</p><p><img src="https://z4a.net/images/2023/03/14/3c58d745ad0aa3ae675db301b26ebb9a.png" alt="img"></p><h3 id="代码分析">代码分析</h3><h5 id="1-用户类-User">1. 用户类-User</h5><p>根据题目需求，用户类应该主要拥有三个属性：用户名、密码和用户所属的学校种类。设置好User类的构造函数和getter、setter便于后续对其进行新增和修改操作。</p><p>定义makePaper方法用于生成对应类型的试卷。</p><p>注意：在判断字符相同时使用equals()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String username, String password, String type)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setType</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始制作试卷</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makePaper</span><span class="params">(User user, <span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">PaperMaker</span> <span class="variable">paperMaker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PaperMaker</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.type.equals(<span class="string">&quot;小学&quot;</span>)) &#123;</span><br><span class="line">            paperMaker.makePrimary(user, num);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.type.equals(<span class="string">&quot;初中&quot;</span>)) &#123;</span><br><span class="line">            paperMaker.makeJunior(user, num);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.type.equals(<span class="string">&quot;高中&quot;</span>)) &#123;</span><br><span class="line">            paperMaker.makeSenior(user, num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-试卷生成类-PaperMaker">2. 试卷生成类-PaperMaker</h5><p>因为题目分为三个难度，所以创建三个链表分别存储对应难度的符号，在构造函数中进行数据的初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//小学专用符号</span></span><br><span class="line"><span class="keyword">private</span> LinkedList&lt;String&gt; primary = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//初中专用符号</span></span><br><span class="line"><span class="keyword">private</span> LinkedList&lt;String&gt; junior = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//高中专用符号</span></span><br><span class="line"><span class="keyword">private</span> LinkedList&lt;String&gt; senior = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">PaperMaker</span><span class="params">()</span> &#123;</span><br><span class="line">    primary.add(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">    primary.add(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">    primary.add(<span class="string">&quot;×&quot;</span>);</span><br><span class="line">    primary.add(<span class="string">&quot;÷&quot;</span>);</span><br><span class="line">    junior.add(<span class="string">&quot;²&quot;</span>);</span><br><span class="line">    junior.add(<span class="string">&quot;√&quot;</span>);</span><br><span class="line">    senior.add(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    senior.add(<span class="string">&quot;sin&quot;</span>);</span><br><span class="line">    senior.add(<span class="string">&quot;cos&quot;</span>);</span><br><span class="line">    senior.add(<span class="string">&quot;tan&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>makePrimary是生成小学题目的方法：传入对象user和所需生成的题目数量,即可进行生成。</p><p>实现操作数随机，设置cnt计数器，固定最大数量为5；设置breakOrNot参数，该参数在每次添加数据后随机更新决定是否退出，来实现随机个操作数的功能。</p><p>实现随机括号功能，设置bracket参数记录未闭合的括号数量，设置bracketOrNot参数每轮取随机数来决定是否加入左括号，设置rightBracket参数每轮取随机数来决定是否加入右括号，算式生成结束后，根据bracket的值在式子末尾补全右括号。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成小学难度题目 生成数量是number</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makePrimary</span><span class="params">(User user, <span class="type">int</span> number)</span> &#123;</span><br><span class="line">     <span class="comment">//生成多少道题目就执行多少次循环</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; number; i++) &#123;</span><br><span class="line">         <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">         <span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">         <span class="comment">//判断括号配对</span></span><br><span class="line">         <span class="type">int</span> <span class="variable">bracket</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">         <span class="comment">//判断退出</span></span><br><span class="line">         <span class="type">int</span> <span class="variable">breakOrNot</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">         <span class="comment">//操作数最多个数</span></span><br><span class="line">         <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">         <span class="comment">//保证操作数不超过5个</span></span><br><span class="line">         <span class="keyword">while</span> (cnt-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">             <span class="comment">//判断是否本轮退出</span></span><br><span class="line">             breakOrNot = random.nextInt(<span class="number">2</span>);</span><br><span class="line">             <span class="comment">//随机加入 (</span></span><br><span class="line">             <span class="type">int</span> <span class="variable">bracketOrNot</span> <span class="operator">=</span> random.nextInt(<span class="number">3</span>);</span><br><span class="line">             <span class="keyword">if</span> (bracketOrNot == <span class="number">1</span> &amp;&amp; breakOrNot != <span class="number">1</span> &amp;&amp; cnt != <span class="number">0</span>) &#123;</span><br><span class="line">                 bracket++;</span><br><span class="line">                 stringBuffer.append(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             <span class="comment">//随机生成1-100之间的操作数</span></span><br><span class="line">             <span class="type">int</span> <span class="variable">ran</span> <span class="operator">=</span> random.nextInt(<span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line">             stringBuffer.append(ran);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             <span class="comment">//判断 加入 )</span></span><br><span class="line">             <span class="type">int</span> <span class="variable">rightBracket</span> <span class="operator">=</span> random.nextInt(<span class="number">2</span>);</span><br><span class="line">             <span class="keyword">if</span> (bracketOrNot != <span class="number">1</span> &amp;&amp; bracket &gt; <span class="number">0</span> &amp;&amp; rightBracket == <span class="number">1</span>) &#123;</span><br><span class="line">                 stringBuffer.append(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">                 bracket--;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment">//随机结束算式</span></span><br><span class="line">             <span class="keyword">if</span> (cnt != <span class="number">4</span>) &#123;</span><br><span class="line">                 <span class="keyword">if</span> (breakOrNot == <span class="number">1</span> || cnt == <span class="number">0</span>) &#123;</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment">//随机生成符号</span></span><br><span class="line">             <span class="type">int</span> <span class="variable">symbolSelect</span> <span class="operator">=</span> random.nextInt(<span class="number">4</span>);</span><br><span class="line">             <span class="type">String</span> <span class="variable">symbol</span> <span class="operator">=</span> primary.get(symbolSelect);</span><br><span class="line">             stringBuffer.append(symbol);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//补全 )</span></span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; bracket; j++) &#123;</span><br><span class="line">             stringBuffer.append(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//输出 =</span></span><br><span class="line">         stringBuffer.append(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">         <span class="comment">//生成试卷</span></span><br><span class="line">         <span class="type">IOController</span> <span class="variable">ioController</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IOController</span>();</span><br><span class="line">         <span class="comment">//生成试卷文件</span></span><br><span class="line">         <span class="type">File</span> <span class="variable">newFile</span> <span class="operator">=</span> ioController.makeFile(user);</span><br><span class="line">         <span class="comment">//存储题目</span></span><br><span class="line">         <span class="type">String</span> <span class="variable">title</span> <span class="operator">=</span> stringBuffer.toString();</span><br><span class="line">         <span class="comment">//题目查重</span></span><br><span class="line">         <span class="keyword">if</span> (ioController.check(newFile, title) == <span class="literal">true</span>) &#123;</span><br><span class="line">             i--;</span><br><span class="line">             <span class="keyword">continue</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//写入试卷</span></span><br><span class="line">         ioController.writeIn(newFile, i + <span class="number">1</span>, title);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>makeJunior是生成初中题目的方法，逻辑基本与上文类似，新增随机加入根号和平方的方法。由于要确保每个算式至少有一个根号或平方，故在while循环外定义squareOrNot = 1来确保每个式子都有平方。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">squareOrNot</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//随机加根号</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">evolutionOrNot</span> <span class="operator">=</span> random.nextInt(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (evolutionOrNot == <span class="number">1</span>) &#123;</span><br><span class="line">        stringBuffer.append(junior.get(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//随机加平方</span></span><br><span class="line">    <span class="keyword">if</span> (squareOrNot == <span class="number">1</span>) &#123;</span><br><span class="line">        stringBuffer.append(junior.get(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    squareOrNot = random.nextInt(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>makeSenior是生成高中题目的方法，逻辑基本与上文类似，新增随即加入三角函数的方法,不再做详细解释。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">tFunction</span> <span class="operator">=</span> random.nextInt(<span class="number">3</span>) + <span class="number">1</span>;                </span><br><span class="line"></span><br><span class="line">    <span class="comment">//随机生成三角函数</span></span><br><span class="line">    stringBuffer.append(senior.get(tFunction));</span><br><span class="line">    tFunction = random.nextInt(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><h5 id="3-文件输出类-IOController">3.文件输出类-IOController</h5><p>文件输出主要分三部分：</p><ol><li>找到或生成对应的文件夹和txt文件</li></ol><p>首先确定文件夹的路径，若之前该文件夹不存在则新创建这个文件夹。再获取当前时间，生成txt 文件的题目，创建这个txt文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成专用文件夹 和 txt文件</span></span><br><span class="line"><span class="keyword">public</span> File <span class="title function_">makeFile</span><span class="params">(User user)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">mkPath</span> <span class="operator">=</span> <span class="string">&quot;D:\\JavaProject\\AutomationPaper\\paper\\&quot;</span> + user.getUsername();</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(mkPath);</span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="comment">//时间处理  用于txt文件的名称</span></span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd-HH-mm-ss&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">title</span> <span class="operator">=</span> simpleDateFormat.format(date) + <span class="string">&quot;.txt&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">        <span class="comment">//单例模式  如果没有对应文件夹则生成</span></span><br><span class="line">        file.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">File</span> <span class="variable">paper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(mkPath, title);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        paper.createNewFile();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> paper;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>文件的写入</li></ol><p>没什么说的，直接看代码吧。</p><p>写完后记得调用flush()函数刷新文件，否则可能出现写入失败的情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写入文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeIn</span><span class="params">(File file, Integer n, String title)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//传入文件 确定类型为续写</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(file, <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//序号</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">num</span> <span class="operator">=</span> n.toString() + <span class="string">&quot;.&quot;</span>;</span><br><span class="line">        fileWriter.append(num + <span class="string">&quot; &quot;</span> + title);</span><br><span class="line">        <span class="comment">//空一行</span></span><br><span class="line">        fileWriter.append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        fileWriter.append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        <span class="comment">//刷新文件，关闭writer</span></span><br><span class="line">        fileWriter.flush();</span><br><span class="line">        fileWriter.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>算式查重</li></ol><p>遍历该txt文件的上一级目录，来获取这个用户所获取的所有试题，再对每一套试题进行遍历对比，若重复则返回true，否则返回false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(File file, String title)</span> &#123;</span><br><span class="line">    <span class="comment">//定义变量 是否重复</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">repetition</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//获取txt文件上一级目录的路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">parentPath</span> <span class="operator">=</span> file.getParent();</span><br><span class="line">    <span class="type">File</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parentPath);</span><br><span class="line">    <span class="comment">//遍历上一级目录，获得其下的所有文件</span></span><br><span class="line">    File[] files = parent.listFiles();</span><br><span class="line">    <span class="comment">//一个一个文件进行查重对比</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; files.length; i++) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(files[i]);</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fileReader);</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="comment">//读取一行数据</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">usedTitle</span> <span class="operator">=</span> bufferedReader.readLine();</span><br><span class="line">                <span class="comment">//如果是空行就跳过</span></span><br><span class="line">                <span class="keyword">if</span> (usedTitle == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//以&quot; &quot;为分隔符,&quot; &quot;后面的就是算式</span></span><br><span class="line">                String[] uT = usedTitle.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (uT.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (uT[<span class="number">1</span>].equals(title)) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;重复&quot;</span>);</span><br><span class="line">                        <span class="comment">//如果重复改变变量的值</span></span><br><span class="line">                        repetition = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> repetition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-登录类-Login">4. 登录类-Login</h5><p>登陆类需存储当前已有用户的信息，负责用户的登录判断、操作判断和改变用户的类型。</p><p>信息初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, User&gt; userMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Login</span><span class="params">()</span> &#123;</span><br><span class="line">    userMap.put(<span class="string">&quot;张三1&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;张三1&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;小学&quot;</span>));</span><br><span class="line">    userMap.put(<span class="string">&quot;张三2&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;张三2&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;小学&quot;</span>));</span><br><span class="line">    userMap.put(<span class="string">&quot;张三3&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;张三3&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;小学&quot;</span>));</span><br><span class="line">    userMap.put(<span class="string">&quot;李四1&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;李四1&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;初中&quot;</span>));</span><br><span class="line">    userMap.put(<span class="string">&quot;李四2&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;李四2&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;初中&quot;</span>));</span><br><span class="line">    userMap.put(<span class="string">&quot;李四3&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;李四3&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;初中&quot;</span>));</span><br><span class="line">    userMap.put(<span class="string">&quot;王五1&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;王五1&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;高中&quot;</span>));</span><br><span class="line">    userMap.put(<span class="string">&quot;王五2&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;王五2&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;高中&quot;</span>));</span><br><span class="line">    userMap.put(<span class="string">&quot;王五3&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;王五3&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;高中&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户登录与操作判断</p><p>根据表内信息，由用户名获取密码来与输入的密码进行比较来判断是登陆成功。登陆成功后根据输入的数据长度来判断用户想进行切换操作、生成题目操作还是退出操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">userLogin</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMap.get(username);</span><br><span class="line">    System.out.println(<span class="string">&quot;当前选择为&quot;</span> + user.getType() + <span class="string">&quot;出题&quot;</span>);</span><br><span class="line">    <span class="comment">//判断密码是否正确</span></span><br><span class="line">    <span class="keyword">if</span> (user.getPassword().equals(password)) &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;准备生成&quot;</span> + user.getType()</span><br><span class="line">                    + <span class="string">&quot;数学题目，请输入生成题目数量（输入-1将退出当前用户，重新登录）：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">inStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in).next();</span><br><span class="line">            <span class="comment">//当输入的是  切换为XX  时</span></span><br><span class="line">            <span class="keyword">if</span> (inStr.length() &gt; <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">sub</span> <span class="operator">=</span> inStr.substring(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">                <span class="keyword">if</span> (sub.equals(<span class="string">&quot;切换为&quot;</span>)) &#123;</span><br><span class="line">                    setUserType(username, inStr.substring(<span class="number">3</span>, <span class="number">5</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//输入的是数字时</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(inStr);</span><br><span class="line">                <span class="keyword">if</span> (num == -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &gt;= <span class="number">10</span> &amp;&amp; num &lt;= <span class="number">30</span>) &#123;</span><br><span class="line">                    user.makePaper(user, num);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入10-30之间的自然数 或 输入-1退出&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入正确的用户名、密码&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改变用户类型</p><p>没什么好说的，传入用户名和要变成的类型即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于改变用户的类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserType</span><span class="params">(String username, String type)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (type.equals(<span class="string">&quot;小学&quot;</span>)) &#123;</span><br><span class="line">        userMap.get(username).setType(type);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">&quot;初中&quot;</span>)) &#123;</span><br><span class="line">        userMap.get(username).setType(type);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">&quot;高中&quot;</span>)) &#123;</span><br><span class="line">        userMap.get(username).setType(type);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入小学、初中和高中三个选项中的一个&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-主类-Main">5. 主类-Main</h5><p>通过死循环来实现退出登录后不会结束程序，而是再次让用户输入用户名密码。用户名和密码通过空格分隔，故对密码进行去除空格（trim）处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">Login</span> <span class="variable">login</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Login</span>();</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//识别用户名和密码</span></span><br><span class="line">            System.out.println(<span class="string">&quot;请输入用户名、密码&quot;</span>);</span><br><span class="line">            login.userLogin(in.next(), in.nextLine().trim());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说实话程序逻辑总体还是有点乱的，后续想在进行优化调整。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;软件工程导论-个人项目&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;题目要求&quot;&gt;题目要求&lt;/h3&gt;
&lt;p&gt;用户：&lt;/p&gt;
&lt;p&gt;小学、初中和高中数学老师。&lt;/p&gt;
&lt;p&gt;功能：&lt;/p&gt;
&lt;p&gt;1、命令行输入用户名和密码，两者之间用空格隔开（程序预设小学、初中和</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>团队项目复盘</title>
    <link href="http://example.com/2023/07/26/%E5%9B%A2%E9%98%9F%E9%A1%B9%E7%9B%AE%E5%A4%8D%E7%9B%98/"/>
    <id>http://example.com/2023/07/26/%E5%9B%A2%E9%98%9F%E9%A1%B9%E7%9B%AE%E5%A4%8D%E7%9B%98/</id>
    <published>2023-07-26T12:49:24.431Z</published>
    <updated>2023-07-26T12:51:44.663Z</updated>
    
    <content type="html"><![CDATA[<h1>团队项目复盘</h1><p>项目名称：健康码管理系统</p><p>小组人数：6人</p><p>本人负责：web后端开发</p><p>项目成果：小程序用户端、web管理端、项目文档（项目前景与范围文档、原型界面、用例文档、需求功能说明书、数据库设计文档、uml设计文档、测试报告、用户手册）</p><p>接下来按照项目过程中的时间顺序来进行复盘~</p><h3 id="原型界面开发">原型界面开发</h3><p>原型界面开始是一种帮助我们确认需求、提高项目可用性的重要方式。我们在设计原型界面的过程中，使用了 “墨刀” 网页版，选择了一款素材库中和我们内容风格相似的原型作为基础，并在其上进行改造（最后我们也确实按照原型实现的）。在验收的过程中，我注意到有很多组并不是设计原型（指生成前端的图片），而是直接使用了前端模板，直接改前端代码并截图来作为原型界面。直接使用前端模板的方式在后续的工作中省去了大量从0到1的编码过程，在实现过程中我注意到其他组前端的工期明显要比我们短很多，界面也相对来说更加美观。<s>所有下次再让我们从0到1自己实现前端可以说是不可能了</s>~</p><p>老师在验收过程中不仅注意了功能的完备合理，还着重关注了细节的问题，比如：确认按钮应在界面最右边。咱也没学过设计，当时觉得老师就是在找茬（bushi），现在反过头来看确实有一定的道理，现实生活中的网站相似的按钮一般也都在右边（好像）。</p><p><img src="https://s1.ax1x.com/2023/03/14/pplfv5j.png" alt="2_普通用户管理界面"></p><p>web后端原型图示例</p><p><img src="https://s1.ax1x.com/2023/03/14/pplfzPs.png" alt="主页面"></p><p>小程序端示例</p><h3 id="用例文档">用例文档</h3><p>由于我们的项目相对一般的项目工作量会偏大，所以用例比一般的组多了很多（大概60+）。用例文档感觉像是我们所期待的系统最终拥有的功能，要求功能完备且逻辑清晰。</p><p>这里不得不自我批评一下，由于后续的变动导致我们最终实现的项目与用例文档包含的功能并不完全一致，很多时候变成了想起什么做什么（前端提要求后端给接口），导致最后功能并不是完全完备的，且由于实际功能与用例文档的不同，提交之前又重新按照成品改了一版用例文档…</p><h3 id="数据库设计">数据库设计</h3><p>数据库设计使用了power designer来生成ER图，并转化为SQL语句。设计过程中我们展开了激烈的讨论，解决了一些问题，但也有一些没考虑到或者没有好办法的问题被迫保留。</p><p><strong>解决了</strong></p><ul><li>两表的主键互为外键：</li></ul><p>在设计时，为了体现两表之间的关联性和可维护性，我们设计了一些外键。但是在实际使用中就遇到了两表互为外键，例如区县防疫办的id作为超级管理者的外键，而超级管理者的id也作为区县防疫办的外键。这就导致了在第一次新增数据时，由于两表都为空，无法使用外键，从而都无法顺利的插入数据。发现这个问题后我们又重新检查了设计好的数据库，最终觉得按照管理关系，去掉区县防疫办中关于超级管理者的外键，从而顺利的插入数据。</p><p>据分析，两表主键互为外键应该是一个设计问题，类似与死锁，并不合理，在首次插入时会造成极大问题。如果两表主键必须互为外键，可以在按照以上方法插入数据后，再重新设置外键；如果两表中已经存在其他数据对象，先插入的对象还可以先引用表的其他对象作为外键，待二者都完成插入，再修改外键。</p><ul><li>物理删除和逻辑删除：</li></ul><p>由于一些外键的存在，我们在某些情况下不方便将数据对象直接从表中物理删除，这是就需要在表中添加新字段deleted来标识这个对象是否被删除，其中0表示未删除，1表示删除。当我们使用mybatis-plus框架时，对数据执行删除操作，就会自动将deleted字段赋为1，并无法查询。如果使用自己设置的查询语句，则应注意在需要时手动添加判断deleted是否为1的条件。</p><ul><li>乐观锁的应用：</li></ul><p>为在保证数据库读写效率的同时，防止在并发操作时出现线程安全问题，我们在数据库中添加了version字段。当读取数据时，将version字段的值一同读出，数据每更新一次，对此version值加一。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的version值进行比对，如果数据库表当前版本号与第一次取出来的version值相等，则予以更新，否则认为是过期数据。需要注意的是，我们需要添加项目的配置文件来启动乐观锁机制。</p><p><img src="https://s1.ax1x.com/2023/03/14/pplhSGn.png" alt="img"></p><p><strong>未解决</strong></p><ul><li>固定核酸检测点的时间问题</li></ul><p>由于固定监测点的时间，所有需要按照星期来进行设置。但是一星期中每天的具体时间又不同，最终只好采取了星期几+上下文的方式来存时间（7*2列）。导致无论是在使用过程中还是在编码过程中都非常的麻烦，可用性不高，但又想不到什么好的解决办法…</p><p><strong>未发现</strong></p><ul><li>很多表和字段并未使用或未设计</li></ul><p>在设计时，我们根据需求和自己的判断完成了一个数据库，但是在编码时还是常常遇到问题，归其根本还是设计数据库时考虑不周。这或许就需要我们在一个个项目中慢慢的积累经验，了解数据库设计的原则和可用性，提高自己的设计水平。</p><h3 id="α版本开发">α版本开发</h3><p>从这里才开始算是正式写代码~</p><p>致谢：感谢黑马讲了代码生成器，要不创建项目不知道要花多久呢</p><p>除去第一天晚上熟悉框架和mybatis-plus的时间，大概三天左右就把α版本的后端接口基本完成了。当然只是我以为的完成…由于没有注意到代码质量和异常处理等问题，最后在验收前可没少填坑…由于忽视了很多需要在后端完成的异常处理，导致在项目测试时经常出现卡死或无反应等情况，麻烦前端的同学一点一点加js了…</p><p>项目搭建后我们还导入或编写了一些工具类，比如Result返回类型、JsonUtils工具类、Authentication身份信息验证类、JacksonObjectMapper对象映射器等等，在后续的开发中这些类多多少少发挥着作用。</p><p><img src="https://s1.ax1x.com/2023/03/14/pplhp2q.png" alt="image-20230308220512080"></p><p>后端测试使用了Apifox，一开始我们都以为接口通过了前后端交互就没啥问题，但是在开始阶段还遇到了一些配置问题，最经典的就是Vue的跨域问题了，虽然解决后认识到是一个比较固定的配置问题，但是在开发过程中还是为了前后端交互发了不少愁…</p><p><img src="https://s1.ax1x.com/2023/03/14/pplh9x0.png" alt="image-20230308220545899"></p><h3 id="β版本开发">β版本开发</h3><p>首先根据α版本的开发情况，对用例文档进行修改，明确接下来的开发方向。我们除了删去了一些和项目关系不太大的版块，还根据实际的上线情况和资源情况进行了调整（比如由于健康码的特殊性，没有办法上线小程序…只能说这项目太特殊了）</p><p>后端的代码开发和前面也有一些改变：</p><ul><li>由于联合查询的出现，新建和使用DTO类</li></ul><p>根据数据库范式的相关知识，我们不能直接把要用到所有信息存到一张表里，常用联合查询的情况，这时候就需要我们新建DTO类来继承初始类，并添加新的信息以供使用。</p><ul><li>redis的使用</li></ul><p>随着测试的数据量不断加大，一些查询甚至是需要5s左右才能返回结果，体验非常不好，所有引入了redis作为缓存来提高查询效率。同时在redis也用到了验证码部分，根据redis缓存时间的特性，来实现了固定时间内的短信验证码验证功能。</p><h3 id="测试">测试</h3><p>在此之前我们也没有接触过测试的相关培训和知识，也不会使用自动化的测试工具，就凭借自己的感觉来测试功能（例如 随便乱输）。你别说，你还真别说，还真遇到了大问题…由于没有进行前端没有考虑js校验，后端也没用进行异常处理，这下随便输什么信息都能存到数据库或者报异常…现在想起来真是追悔莫及…最后项目也是在这个问题上扣了不少分（按bug个数扣分，我们的功能又多，重复扣了好多次…感谢xxr老师）。还有一些由于外键连接导致的删除数据后查询异常的问题（就该把他整成禁止删除的），反正搞得乱糟糟的，肯定要重新构思实现了…</p><p>整个项目到这里基本上就结束了，最后应该还被老师拿去放到新书里当案例了，课程评优三等奖，但是回过头来看项目还有很多可以调优和改进的地方（安全性、响应速度、用户体验等），暂时就给后续的项目当个反面典型得了</p><p>整个合作过程还算是比较轻松愉快的，当时分组就挑选了平时一起学习的伙伴，大家的水平和技术栈也相对来说比较相似，大多也肯干能干（就是对自己很自信才选了个大项目，但是这评分机制我是真的无力吐槽了…），在某部分比较忙的时候也少不了大家互相客串一下来完成任务（被迫全栈），如果有机会再一起写项目的话（那肯定有），希望我们能做出真正符合使用需求的优秀项目！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;团队项目复盘&lt;/h1&gt;
&lt;p&gt;项目名称：健康码管理系统&lt;/p&gt;
&lt;p&gt;小组人数：6人&lt;/p&gt;
&lt;p&gt;本人负责：web后端开发&lt;/p&gt;
&lt;p&gt;项目成果：小程序用户端、web管理端、项目文档（项目前景与范围文档、原型界面、用例文档、需求功能说明书、数据库设计文档、uml设计文</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数据库设计和使用中遇到的问题</title>
    <link href="http://example.com/2023/07/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E5%92%8C%E4%BD%BF%E7%94%A8%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2023/07/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E5%92%8C%E4%BD%BF%E7%94%A8%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2023-07-26T12:49:24.428Z</published>
    <updated>2023-07-26T12:51:24.117Z</updated>
    
    <content type="html"><![CDATA[<h1>数据库设计和使用中遇到的问题</h1><ol><li>两表的主键互为外键：</li></ol><p>在设计时，为了体现两表之间的关联性和可维护性，我们设计了一些外键。但是在实际使用中就遇到了两表互为外键，例如区县防疫办的id作为超级管理者的外键，而超级管理者的id也作为区县防疫办的外键。这就导致了在第一次新增数据时，由于两表都为空，无法使用外键，从而都无法顺利的插入数据。发现这个问题后我们又重新检查了设计好的数据库，最终觉得按照管理关系，去掉区县防疫办中关于超级管理者的外键，从而顺利的插入数据。</p><p>据分析，两表主键互为外键应该是一个设计问题，类似与死锁，并不合理，在首次插入时会造成极大问题。如果两表主键必须互为外键，可以在按照以上方法插入数据后，再重新设置外键；如果两表中已经存在其他数据对象，先插入的对象还可以先引用表的其他对象作为外键，待二者都完成插入，再修改外键。</p><ol><li>物理删除和逻辑删除：</li></ol><p>由于一些外键的存在，我们在某些情况下不方便将数据对象直接从表中物理删除，这是就需要在表中添加新字段deleted来标识这个对象是否被删除，其中0表示未删除，1表示删除。当我们使用mybatis-plus框架时，对数据执行删除操作，就会自动将deleted字段赋为1，并无法查询。如果使用自己设置的查询语句，则应注意在需要时手动添加判断deleted是否为1的条件。</p><ol><li>乐观锁的应用：</li></ol><p>为在保证数据库读写效率的同时，防止在并发操作时出现线程安全问题，我们在数据库中添加了version字段。当读取数据时，将version字段的值一同读出，数据每更新一次，对此version值加一。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的version值进行比对，如果数据库表当前版本号与第一次取出来的version值相等，则予以更新，否则认为是过期数据。需要注意的是，我们需要添加项目的配置文件来启动乐观锁机制。</p><p><img src="https://z4a.net/images/2023/03/14/b2376753d41949cef9a4dc670944164e.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;数据库设计和使用中遇到的问题&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;两表的主键互为外键：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在设计时，为了体现两表之间的关联性和可维护性，我们设计了一些外键。但是在实际使用中就遇到了两表互为外键，例如区县防疫办的id作为超级管理者的外键，而超级管理者的id</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>流式计算中的Window机制</title>
    <link href="http://example.com/2023/07/26/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97%E4%B8%AD%E7%9A%84Window%E6%9C%BA%E5%88%B6/"/>
    <id>http://example.com/2023/07/26/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97%E4%B8%AD%E7%9A%84Window%E6%9C%BA%E5%88%B6/</id>
    <published>2023-07-26T12:49:24.426Z</published>
    <updated>2023-07-26T12:51:06.631Z</updated>
    
    <content type="html"><![CDATA[<h1>流式计算中的Window机制</h1><h3 id="Window-是什么">Window 是什么</h3><p>在流计算中，数据流是持续不断的，因此不可能等全部数据都到了再开始处理。Window的作用就是将无限的Streaming拆分成大小有限的Batch，我们可以对每个Window里的数据进行应用和计算。</p><h3 id="典型Window的基本功能">典型Window的基本功能</h3><p>本文介绍 滚动窗口 、滑动窗口 和 会话窗口</p><h4 id="Tumble-Window（滚动窗口）">Tumble Window（滚动窗口）</h4><p><img src="https://z4a.net/images/2023/03/14/9a5574f996664b401abc3586fc17dceb.png" alt="img"></p><p>滚动窗口特点：</p><ul><li>窗口不重叠，每个数据只能属于一个窗口</li><li>窗口长度固定</li><li>当时间大于等于Window end时，一次性触发对应的Window的输出</li></ul><h4 id="Sliding-Window（滑动窗口）">Sliding Window（滑动窗口）</h4><p><img src="https://z4a.net/images/2023/03/14/e1f85dc64578c22b8577b3a715c0b3cf.jpg" alt="img"></p><p>滚动窗口特点：</p><ul><li><p>滑动窗口以一个步长不断向前滑动，窗口的长度固定。</p></li><li><p>窗口可能重叠</p></li><li><ul><li>当窗口长度大于滑动窗口的步长，数据就可能属于多个窗口</li><li>当窗口长度小于滑动窗口的步长，数据就可能不属于任何窗口</li></ul></li><li><p>当时间大于等于Window end时，一次性触发对应的Window的输出</p></li></ul><h4 id="Session-Window（会话窗口）">Session Window（会话窗口）</h4><p><img src="https://z4a.net/images/2023/03/14/f35161c2a970bb52c3233bfbda3af996.jpg" alt="img"></p><ul><li>session gap 指 各个session之间的间隔，一般会设置一个会话的最大gap，比如1分钟，当session gap大于1分钟，数据就会被分到不同的session中。</li><li>窗口长度不等</li><li>当时间大于等于Window end时，一次性触发对应的Window的输出</li></ul><h4 id="迟到数据的处理">迟到数据的处理</h4><ul><li><p>迟到的定义：watermark驱动某个窗口<strong>触发输出</strong>之后，这个窗口如果后面又来了数据，那这种情况就属于是迟到的数据了。</p></li><li><p>处理办法：</p></li><li><ol><li>直接丢弃（默认）</li><li>设置一个允许迟到时间，这种情况下，窗口正常计算时间结束后不会马上清理数据，而是多保留一个“迟到时间”，如果这段时间内有数据到达，则继续计算</li><li>将迟到数据转变成一个单独的流，再由用户自己决定如何处理（侧输出流）</li></ol></li></ul><h4 id="增量计算-和-全量计算">增量计算 和 全量计算</h4><ul><li>增量计算：每条数据到来后，直接参与计算，但是暂不输出结果</li><li>全量计算：每条数据到来后，先放到一个buffer中，这个buffer会存储到状态里，直到窗口触发输出的时候，才把所有数据拿出来统一进行计算</li></ul><h4 id="EMIT触发">EMIT触发</h4><ul><li>背景：正常的窗口都是在窗口结束时才会进行输出，比如窗口时间为一天，只有在一天结束时才会输出结果，这时便失去了实时计算的意义。</li><li>作用：EMIT触发是一种<strong>可以提前把窗口内容输出</strong>的机制，比如窗口时间为一天的窗口，设置其5s输出一次，使下游更快的获得到窗口计算的结果。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;流式计算中的Window机制&lt;/h1&gt;
&lt;h3 id=&quot;Window-是什么&quot;&gt;Window 是什么&lt;/h3&gt;
&lt;p&gt;在流计算中，数据流是持续不断的，因此不可能等全部数据都到了再开始处理。Window的作用就是将无限的Streaming拆分成大小有限的Batch，我们可以</summary>
      
    
    
    
    
  </entry>
  
</feed>
